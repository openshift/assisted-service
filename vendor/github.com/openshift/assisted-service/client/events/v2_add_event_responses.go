// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// V2AddEventReader is a Reader for the V2AddEvent structure.
type V2AddEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2AddEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewV2AddEventCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV2AddEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV2AddEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV2AddEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV2AddEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewV2AddEventMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV2AddEventConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV2AddEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewV2AddEventNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewV2AddEventServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewV2AddEventCreated creates a V2AddEventCreated with default headers values
func NewV2AddEventCreated() *V2AddEventCreated {
	return &V2AddEventCreated{}
}

/*
V2AddEventCreated describes a response with status code 201, with default header values.

Success.
*/
type V2AddEventCreated struct {
}

// IsSuccess returns true when this v2 add event created response has a 2xx status code
func (o *V2AddEventCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v2 add event created response has a 3xx status code
func (o *V2AddEventCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event created response has a 4xx status code
func (o *V2AddEventCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 add event created response has a 5xx status code
func (o *V2AddEventCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event created response a status code equal to that given
func (o *V2AddEventCreated) IsCode(code int) bool {
	return code == 201
}

func (o *V2AddEventCreated) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventCreated ", 201)
}

func (o *V2AddEventCreated) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventCreated ", 201)
}

func (o *V2AddEventCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewV2AddEventBadRequest creates a V2AddEventBadRequest with default headers values
func NewV2AddEventBadRequest() *V2AddEventBadRequest {
	return &V2AddEventBadRequest{}
}

/*
V2AddEventBadRequest describes a response with status code 400, with default header values.

Error.
*/
type V2AddEventBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event bad request response has a 2xx status code
func (o *V2AddEventBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event bad request response has a 3xx status code
func (o *V2AddEventBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event bad request response has a 4xx status code
func (o *V2AddEventBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event bad request response has a 5xx status code
func (o *V2AddEventBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event bad request response a status code equal to that given
func (o *V2AddEventBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *V2AddEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventBadRequest  %+v", 400, o.Payload)
}

func (o *V2AddEventBadRequest) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventBadRequest  %+v", 400, o.Payload)
}

func (o *V2AddEventBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventUnauthorized creates a V2AddEventUnauthorized with default headers values
func NewV2AddEventUnauthorized() *V2AddEventUnauthorized {
	return &V2AddEventUnauthorized{}
}

/*
V2AddEventUnauthorized describes a response with status code 401, with default header values.

Unauthorized.
*/
type V2AddEventUnauthorized struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this v2 add event unauthorized response has a 2xx status code
func (o *V2AddEventUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event unauthorized response has a 3xx status code
func (o *V2AddEventUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event unauthorized response has a 4xx status code
func (o *V2AddEventUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event unauthorized response has a 5xx status code
func (o *V2AddEventUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event unauthorized response a status code equal to that given
func (o *V2AddEventUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *V2AddEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventUnauthorized  %+v", 401, o.Payload)
}

func (o *V2AddEventUnauthorized) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventUnauthorized  %+v", 401, o.Payload)
}

func (o *V2AddEventUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2AddEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventForbidden creates a V2AddEventForbidden with default headers values
func NewV2AddEventForbidden() *V2AddEventForbidden {
	return &V2AddEventForbidden{}
}

/*
V2AddEventForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type V2AddEventForbidden struct {
	Payload *models.InfraError
}

// IsSuccess returns true when this v2 add event forbidden response has a 2xx status code
func (o *V2AddEventForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event forbidden response has a 3xx status code
func (o *V2AddEventForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event forbidden response has a 4xx status code
func (o *V2AddEventForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event forbidden response has a 5xx status code
func (o *V2AddEventForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event forbidden response a status code equal to that given
func (o *V2AddEventForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *V2AddEventForbidden) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventForbidden  %+v", 403, o.Payload)
}

func (o *V2AddEventForbidden) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventForbidden  %+v", 403, o.Payload)
}

func (o *V2AddEventForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *V2AddEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventNotFound creates a V2AddEventNotFound with default headers values
func NewV2AddEventNotFound() *V2AddEventNotFound {
	return &V2AddEventNotFound{}
}

/*
V2AddEventNotFound describes a response with status code 404, with default header values.

Error.
*/
type V2AddEventNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event not found response has a 2xx status code
func (o *V2AddEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event not found response has a 3xx status code
func (o *V2AddEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event not found response has a 4xx status code
func (o *V2AddEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event not found response has a 5xx status code
func (o *V2AddEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event not found response a status code equal to that given
func (o *V2AddEventNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *V2AddEventNotFound) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventNotFound  %+v", 404, o.Payload)
}

func (o *V2AddEventNotFound) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventNotFound  %+v", 404, o.Payload)
}

func (o *V2AddEventNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventMethodNotAllowed creates a V2AddEventMethodNotAllowed with default headers values
func NewV2AddEventMethodNotAllowed() *V2AddEventMethodNotAllowed {
	return &V2AddEventMethodNotAllowed{}
}

/*
V2AddEventMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed.
*/
type V2AddEventMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event method not allowed response has a 2xx status code
func (o *V2AddEventMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event method not allowed response has a 3xx status code
func (o *V2AddEventMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event method not allowed response has a 4xx status code
func (o *V2AddEventMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event method not allowed response has a 5xx status code
func (o *V2AddEventMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event method not allowed response a status code equal to that given
func (o *V2AddEventMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *V2AddEventMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *V2AddEventMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *V2AddEventMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventConflict creates a V2AddEventConflict with default headers values
func NewV2AddEventConflict() *V2AddEventConflict {
	return &V2AddEventConflict{}
}

/*
V2AddEventConflict describes a response with status code 409, with default header values.

Cluster cannot accept new agents due to its current state.
*/
type V2AddEventConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event conflict response has a 2xx status code
func (o *V2AddEventConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event conflict response has a 3xx status code
func (o *V2AddEventConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event conflict response has a 4xx status code
func (o *V2AddEventConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v2 add event conflict response has a 5xx status code
func (o *V2AddEventConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v2 add event conflict response a status code equal to that given
func (o *V2AddEventConflict) IsCode(code int) bool {
	return code == 409
}

func (o *V2AddEventConflict) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventConflict  %+v", 409, o.Payload)
}

func (o *V2AddEventConflict) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventConflict  %+v", 409, o.Payload)
}

func (o *V2AddEventConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventInternalServerError creates a V2AddEventInternalServerError with default headers values
func NewV2AddEventInternalServerError() *V2AddEventInternalServerError {
	return &V2AddEventInternalServerError{}
}

/*
V2AddEventInternalServerError describes a response with status code 500, with default header values.

Error.
*/
type V2AddEventInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event internal server error response has a 2xx status code
func (o *V2AddEventInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event internal server error response has a 3xx status code
func (o *V2AddEventInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event internal server error response has a 4xx status code
func (o *V2AddEventInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 add event internal server error response has a 5xx status code
func (o *V2AddEventInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 add event internal server error response a status code equal to that given
func (o *V2AddEventInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *V2AddEventInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventInternalServerError  %+v", 500, o.Payload)
}

func (o *V2AddEventInternalServerError) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventInternalServerError  %+v", 500, o.Payload)
}

func (o *V2AddEventInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventNotImplemented creates a V2AddEventNotImplemented with default headers values
func NewV2AddEventNotImplemented() *V2AddEventNotImplemented {
	return &V2AddEventNotImplemented{}
}

/*
V2AddEventNotImplemented describes a response with status code 501, with default header values.

Not implemented.
*/
type V2AddEventNotImplemented struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event not implemented response has a 2xx status code
func (o *V2AddEventNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event not implemented response has a 3xx status code
func (o *V2AddEventNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event not implemented response has a 4xx status code
func (o *V2AddEventNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 add event not implemented response has a 5xx status code
func (o *V2AddEventNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 add event not implemented response a status code equal to that given
func (o *V2AddEventNotImplemented) IsCode(code int) bool {
	return code == 501
}

func (o *V2AddEventNotImplemented) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventNotImplemented  %+v", 501, o.Payload)
}

func (o *V2AddEventNotImplemented) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventNotImplemented  %+v", 501, o.Payload)
}

func (o *V2AddEventNotImplemented) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV2AddEventServiceUnavailable creates a V2AddEventServiceUnavailable with default headers values
func NewV2AddEventServiceUnavailable() *V2AddEventServiceUnavailable {
	return &V2AddEventServiceUnavailable{}
}

/*
V2AddEventServiceUnavailable describes a response with status code 503, with default header values.

Unavailable.
*/
type V2AddEventServiceUnavailable struct {
	Payload *models.Error
}

// IsSuccess returns true when this v2 add event service unavailable response has a 2xx status code
func (o *V2AddEventServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v2 add event service unavailable response has a 3xx status code
func (o *V2AddEventServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v2 add event service unavailable response has a 4xx status code
func (o *V2AddEventServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this v2 add event service unavailable response has a 5xx status code
func (o *V2AddEventServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this v2 add event service unavailable response a status code equal to that given
func (o *V2AddEventServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *V2AddEventServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *V2AddEventServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /v2/events][%d] v2AddEventServiceUnavailable  %+v", 503, o.Payload)
}

func (o *V2AddEventServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *V2AddEventServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
