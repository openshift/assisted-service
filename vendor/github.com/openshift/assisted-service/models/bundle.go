// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Bundle The name of the bundle.
//
// swagger:model bundle
type Bundle string

func NewBundle(value Bundle) *Bundle {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Bundle.
func (m Bundle) Pointer() *Bundle {
	return &m
}

const (

	// BundleVirtualization captures enum value "virtualization"
	BundleVirtualization Bundle = "virtualization"

	// BundleOpenshiftai captures enum value "openshiftai"
	BundleOpenshiftai Bundle = "openshiftai"
)

// for schema
var bundleEnum []interface{}

func init() {
	var res []Bundle
	if err := json.Unmarshal([]byte(`["virtualization","openshiftai"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bundleEnum = append(bundleEnum, v)
	}
}

func (m Bundle) validateBundleEnum(path, location string, value Bundle) error {
	if err := validate.EnumCase(path, location, value, bundleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this bundle
func (m Bundle) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBundleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this bundle based on context it is used
func (m Bundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
