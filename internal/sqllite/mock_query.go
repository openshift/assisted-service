// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package sqllite is a generated GoMock package.
package sqllite

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// GetOperatorVersions mocks base method.
func (m *MockQuery) GetOperatorVersions(bundleName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorVersions", bundleName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorVersions indicates an expected call of GetOperatorVersions.
func (mr *MockQueryMockRecorder) GetOperatorVersions(bundleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorVersions", reflect.TypeOf((*MockQuery)(nil).GetOperatorVersions), bundleName)
}
