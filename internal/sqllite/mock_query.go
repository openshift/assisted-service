// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package sqllite is a generated GoMock package.
package sqllite

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOperatorVersionReader is a mock of OperatorVersionReader interface.
type MockOperatorVersionReader struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorVersionReaderMockRecorder
}

// MockOperatorVersionReaderMockRecorder is the mock recorder for MockOperatorVersionReader.
type MockOperatorVersionReaderMockRecorder struct {
	mock *MockOperatorVersionReader
}

// NewMockOperatorVersionReader creates a new mock instance.
func NewMockOperatorVersionReader(ctrl *gomock.Controller) *MockOperatorVersionReader {
	mock := &MockOperatorVersionReader{ctrl: ctrl}
	mock.recorder = &MockOperatorVersionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorVersionReader) EXPECT() *MockOperatorVersionReaderMockRecorder {
	return m.recorder
}

// GetOperatorVersionsFromDB mocks base method.
func (m *MockOperatorVersionReader) GetOperatorVersionsFromDB(dbFile, bundleName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorVersionsFromDB", dbFile, bundleName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorVersionsFromDB indicates an expected call of GetOperatorVersionsFromDB.
func (mr *MockOperatorVersionReaderMockRecorder) GetOperatorVersionsFromDB(dbFile, bundleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorVersionsFromDB", reflect.TypeOf((*MockOperatorVersionReader)(nil).GetOperatorVersionsFromDB), dbFile, bundleName)
}
