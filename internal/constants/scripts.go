package constants

// PreNetworkConfigScript script runs on hosts before network manager service starts in order to apply
// user's provided network configuration on the host.
// If the user provides static network configuration, the network config files will be stored in directory
// /etc/assisted/network in the following structure:
// /etc/assisted/network/
//
//		+-- host1
//		|      +--- *.nmconnection
//		|      +--- mac_interface.ini
//		+-- host2
//		      +--- *.nmconnection
//		      +--- mac_interface.ini
//	 1. *.nmconnections - files generated by nmstate based on yaml files provided by the user
//	 2. mac_interface.ini - the file contains mapping of mac-address to logical interface name.
//	    There are two usages for the file:
//	 1. Map logical interface name to MAC Address of the host. The logical interface name is a
//	    name provided by the user for the interface. It will be replaced by the script with the
//	    actual network interface name.
//	 2. Identify if a host directory belongs to the current host by matching a MAC Address
//	    from the mapping file with host network interfaces.
//
// Applying the network configuration of each host will be done by:
//  1. Associate the current host with its matching hostX directories. The association will be done by
//     matching host's mac addresses with those in mac_interface.ini.
//  2. Replace logical interface name in nmconnection files with the interface name as set on the host
//  3. Rename nmconnection files to start with the interface name (instead of the logical interface name)
//  4. Copy the nmconnection files to the target directory. That will be
//     '/etc/NetworkManager/system-connections' when the script is part of the full ISO and
//     '/etc/coreos-firstboot-network' when the script is part of the minimal ISO.
const PreNetworkConfigScript = `#!/bin/bash

PATH_PREFIX=${PATH_PREFIX:=''}

# The directory that contains nmconnection files of all nodes
NMCONNECTIONS_DIR=${PATH_PREFIX}/etc/assisted/network
MAC_NIC_MAPPING_FILE=mac_interface.ini

if [[ ! -d "$NMCONNECTIONS_DIR" ]]
then
  echo "Error (exiting): Expected to find the directory $NMCONNECTIONS_DIR on the host but this was not present."
  exit 0
fi

# A map of host mac addresses to interface names
declare -A host_macs_to_hw_iface

# A mac-to-nic map created from the mapping file associated with the host
declare -A logical_mac_nic_map

# A map from old vlan interface names to new ones
declare -A vlan_replacements

# Working directory used for storage of processed files before installation in the target directory
work_dir=$(mktemp -d)

# Find destination directory based on ISO mode
if [[ -f ${PATH_PREFIX}/etc/initrd-release ]]; then
  ETC_NETWORK_MANAGER="${PATH_PREFIX}/etc/coreos-firstboot-network"
else
  ETC_NETWORK_MANAGER="${PATH_PREFIX}/etc/NetworkManager/system-connections"
fi
echo "Info: ETC_NETWORK_MANAGER was set to $ETC_NETWORK_MANAGER"

# Create a map of host mac addresses to their network interfaces
function map_host_macs_to_interfaces() {
  SYS_CLASS_NET_DIR="${PATH_PREFIX}/sys/class/net"
  for nic in $( ls $SYS_CLASS_NET_DIR )
  do
    mac=$(cat $SYS_CLASS_NET_DIR/$nic/address | tr '[:lower:]' '[:upper:]')
    [[ -n "$mac" ]] && host_macs_to_hw_iface[$mac]=$nic
  done
}

# Copy all nmstate files representing a host nic.  All these files have the host nic as filename prefix.
function copy_physical_nics_files() {
  host_src_dir=$1
  mapping_file=$2
  host_work_dir=$3
  for mac_address in $(cat $mapping_file | cut -d= -f1 | tr '[:lower:]' '[:upper:]');  do
    host_nic="${host_macs_to_hw_iface[${mac_address}]:-}"
    if [[  -n "$host_nic" ]]; then
      logical_nic="${logical_mac_nic_map[${mac_address}]:-}"
      if [[ -n "$(ls -A $host_src_dir/*.nmconnection )" ]] ; then
        for nmfile in $host_src_dir/*.nmconnection ; do
          filename=$(basename $nmfile)
          prefix="${filename%%.*}"
          extension="${filename#*.}"

          if [[ -n "$prefix" ]] && [[ "$prefix" == "$logical_nic" ]] ; then

            # Check to see if adding the vlan id will push the interface name over 15 characters and trim the host interface if so
            # NetworkManager has a 15 character limit on interface names
            this_host_nic=${host_nic}
            vlan_id="$(echo ${extension} | cut -s -d'.' -f1)"
            if [[ -n "${vlan_id}" ]] ; then
              len=$(echo -n "${host_nic}.${vlan_id}" | wc -m)
              if [ "$len" -gt "15" ] ; then
                extra=$(($len - 15))
                nic_len=$(echo -n "${host_nic}" | wc -m)
                this_host_nic=$(echo ${host_nic} | cut -c -$(($nic_len-$extra)))
                # record this substitution to be used later
                vlan_replacements[${host_nic}.${vlan_id}]=${this_host_nic}.${vlan_id}
              fi
            fi

            target_file=$host_work_dir/${this_host_nic}.${extension}
            mv -f $nmfile $target_file
            echo "Info: Copied $nmfile to $target_file"
          fi
        done
      fi
    fi
  done
}

# Copy all files that were not copied already by the function copy_physical_nics_files.  These files represent nics
# that do not have prefix of physical nic (example: eth0).  In this case the file is either copied as is
# having the same name as the source file, or if such a name already exists an error is generated
function copy_other_files() {
  host_src_dir=$1
  host_work_dir=$2
  if [[ -n "$(ls -A ${host_src_dir}/*.nmconnection)" ]] ; then
    for nmfile in ${host_src_dir}/*.nmconnection ; do
      filename=$(basename $nmfile)
      target_file=$host_work_dir/$filename

      # Copy the file only if the file name was not used already
      if ! [[ -f $work_dir/$filename ]] ; then
        mv -f $nmfile $target_file
        echo "Info: Copied $nmfile to $target_file"
      else
        echo "Error: connection file name ${filename} is already in use. Please rename"
      fi
    done
  fi
}

# Update references to host nics in the nmstate files
function update_physical_nics_references() {
  mapping_file=$1
  host_work_dir=$2
  if [ "$(ls -A $host_work_dir )" ] ; then
    for mac_address in $(cat $mapping_file | cut -d= -f1 | tr '[:lower:]' '[:upper:]'); do
      host_nic="${host_macs_to_hw_iface[${mac_address}]:-}"
      if [[  -n "$host_nic" ]]; then
        logical_nic="${logical_mac_nic_map[${mac_address}]:-}"
        for nmfile in $host_work_dir/*.nmconnection ; do
          sed -i -e "s/=$logical_nic$/=$host_nic/g" -e "s/=$logical_nic\./=$host_nic\./g" $nmfile
          echo "Info: Using logical interface name '$logical_nic' for interface with Mac address '$mac_address', updated $nmfile"

          for vlan in "${!vlan_replacements[@]}"; do
            sed -i "s/=${vlan}/=${vlan_replacements[${vlan}]}/g" $nmfile
            echo "Info: Replacing instances of logical vlan name ${vlan} with ${vlan_replacements[${vlan}]} in $nmfile"
          done
        done
      fi
    done
  fi
}

# Iterate over the host directories and process any of them that having matching interfaces with any of the local nics.
# A host directory matches a host if the MAC address of one of the nics of the local host appears in the file
# mac_mapping.ini in the directory.
function process_host_directories_by_mac_address() {
  pattern="$(echo -n ${!host_macs_to_hw_iface[@]} | sed 's/  */|/g')"
  if [[ -z "$pattern" ]] ; then
    return
  fi
  src_dir=$(mktemp -d)
  cp -r ${NMCONNECTIONS_DIR}/host* $src_dir || /bin/true
  for host_src_dir in $(ls -1 -d $src_dir/host* || echo)
  do
    mapping_file="${host_src_dir}/${MAC_NIC_MAPPING_FILE}"
    if [[ ! -f "$mapping_file" ]]
    then
      echo "Warning: Mapping file $mapping_file is missing. Skipping on directory $host_src_dir"
      continue
    fi

    if [[ -z "$(ls -A $host_src_dir/*.nmconnection)" ]]
    then
      echo "Warning: Host directory does not contain any nmconnection files, skipping"
      continue
    fi

    if grep -q -i -E "$pattern" $mapping_file; then
      echo "Info: Found host directory: $(basename $host_src_dir) , copying configuration"
      host_work_dir=$(mktemp -d)

      echo "Info: Copying physical interface files for host $(basename $host_src_dir)"
      # Copy all physical nics files that match logical nics in the mapping file
      copy_physical_nics_files $host_src_dir $mapping_file $host_work_dir

      echo "Info: Copying other interface files for host $(basename $host_src_dir)"
      # Copy the rest of the files from the host directory
      copy_other_files $host_src_dir $host_work_dir

      echo "Info: Updating references for host $(basename $host_src_dir)"
      # Update references in the nmstate files to host nics
      update_physical_nics_references $mapping_file $host_work_dir

      cp $host_work_dir/* $work_dir || /bin/true
      rm -rf $host_work_dir
    fi
  done
  rm -rf $src_dir
}

function map_mac_logical_nic_mapping() {
  echo "Info: Checking all '${MAC_NIC_MAPPING_FILE}' for mac to logical nic mappings"
  # initialize logical_mac_nic_map with mapping file entries
  for f in $(echo ${NMCONNECTIONS_DIR}/host*/${MAC_NIC_MAPPING_FILE} || echo) ; do
    readarray -t lines < "${f}"
    for line in "${lines[@]}"
    do
      mac=${line%%=*}
      nic=${line#*=}
      logical_mac_nic_map[${mac^^}]=$nic
    done
  done
}


echo "PreNetworkConfig Start"

# Get the mac to host nic mapping from local machine
map_host_macs_to_interfaces

# Get mac to local nic mapping from all mac_mapping.ini files in host directories
map_mac_logical_nic_mapping

# Process all relevant files and put them in work_dir
process_host_directories_by_mac_address

# Make sure we do not run any of the following functions if there was no matching config.
if [ "$(ls -A $work_dir )" ];  then
    # Remove default connection file create by NM(nm-initrd-generator). This is a WA until
    # NM is back to supporting priority between nmconnections.
    #
    # Note that when this is intended mostly for the full ISO scenario. In the minimal ISO scenario
    # this script runs before the 'coreos-coreos-copy-firstboot-network' service, and that script
    # already removes the connection files, but it doesn't hurt to do it again.
    mkdir -p ${ETC_NETWORK_MANAGER}
    echo "Info: Removing default connection files in '$ETC_NETWORK_MANAGER'"
    rm -f ${ETC_NETWORK_MANAGER}/*
    echo "Info: Copying files from working directory to '$ETC_NETWORK_MANAGER'"
    cp -v $work_dir/* ${ETC_NETWORK_MANAGER}
else
    echo "Info: No matching host directories found"
fi
rm -rf $work_dir
echo "PreNetworkConfig End"
`

const MinimalISONetworkConfigService = `
[Unit]
Description=Assisted static network config
DefaultDependencies=no

# We need to run after the kernel and udev have detected all the network interface devices,
# otherwise the mechanism that we use to find the MAC addresses will not work and the configuration
# will not be applied.
After=systemd-udev-settle.service

# We need to run before the service that installs the network connection files that we generate.
Before=coreos-copy-firstboot-network.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/pre-network-manager-config.sh
`
