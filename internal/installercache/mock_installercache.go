// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package installercache is a generated GoMock package.
package installercache

import (
	context "context"
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	oc "github.com/openshift/assisted-service/internal/oc"
)

// MockInstallerCache is a mock of InstallerCache interface.
type MockInstallerCache struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerCacheMockRecorder
}

// MockInstallerCacheMockRecorder is the mock recorder for MockInstallerCache.
type MockInstallerCacheMockRecorder struct {
	mock *MockInstallerCache
}

// NewMockInstallerCache creates a new mock instance.
func NewMockInstallerCache(ctrl *gomock.Controller) *MockInstallerCache {
	mock := &MockInstallerCache{ctrl: ctrl}
	mock.recorder = &MockInstallerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallerCache) EXPECT() *MockInstallerCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInstallerCache) Get(ctx context.Context, releaseID, releaseIDMirror, pullSecret string, ocRelease oc.Release, ocpVersion string, clusterID strfmt.UUID) (*Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, releaseID, releaseIDMirror, pullSecret, ocRelease, ocpVersion, clusterID)
	ret0, _ := ret[0].(*Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstallerCacheMockRecorder) Get(ctx, releaseID, releaseIDMirror, pullSecret, ocRelease, ocpVersion, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstallerCache)(nil).Get), ctx, releaseID, releaseIDMirror, pullSecret, ocRelease, ocpVersion, clusterID)
}
