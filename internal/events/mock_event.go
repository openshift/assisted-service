// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package events is a generated GoMock package.
package events

import (
	context "context"
	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	reflect "reflect"
	time "time"
)

// MockSender is a mock of Sender interface
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// AddEvent mocks base method
func (m *MockSender) AddEvent(ctx context.Context, clusterID strfmt.UUID, hostID *strfmt.UUID, severity, msg string, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", ctx, clusterID, hostID, severity, msg, eventTime)
}

// AddEvent indicates an expected call of AddEvent
func (mr *MockSenderMockRecorder) AddEvent(ctx, clusterID, hostID, severity, msg, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockSender)(nil).AddEvent), ctx, clusterID, hostID, severity, msg, eventTime)
}

// SendClusterEvent mocks base method
func (m *MockSender) SendClusterEvent(ctx context.Context, event ClusterEvent, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendClusterEvent", ctx, event, eventTime)
}

// SendClusterEvent indicates an expected call of SendClusterEvent
func (mr *MockSenderMockRecorder) SendClusterEvent(ctx, event, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendClusterEvent", reflect.TypeOf((*MockSender)(nil).SendClusterEvent), ctx, event, eventTime)
}

// SendHostEvent mocks base method
func (m *MockSender) SendHostEvent(ctx context.Context, event HostEvent, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendHostEvent", ctx, event, eventTime)
}

// SendHostEvent indicates an expected call of SendHostEvent
func (mr *MockSenderMockRecorder) SendHostEvent(ctx, event, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHostEvent", reflect.TypeOf((*MockSender)(nil).SendHostEvent), ctx, event, eventTime)
}

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddEvent mocks base method
func (m *MockHandler) AddEvent(ctx context.Context, clusterID strfmt.UUID, hostID *strfmt.UUID, severity, msg string, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", ctx, clusterID, hostID, severity, msg, eventTime)
}

// AddEvent indicates an expected call of AddEvent
func (mr *MockHandlerMockRecorder) AddEvent(ctx, clusterID, hostID, severity, msg, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockHandler)(nil).AddEvent), ctx, clusterID, hostID, severity, msg, eventTime)
}

// SendClusterEvent mocks base method
func (m *MockHandler) SendClusterEvent(ctx context.Context, event ClusterEvent, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendClusterEvent", ctx, event, eventTime)
}

// SendClusterEvent indicates an expected call of SendClusterEvent
func (mr *MockHandlerMockRecorder) SendClusterEvent(ctx, event, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendClusterEvent", reflect.TypeOf((*MockHandler)(nil).SendClusterEvent), ctx, event, eventTime)
}

// SendHostEvent mocks base method
func (m *MockHandler) SendHostEvent(ctx context.Context, event HostEvent, eventTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendHostEvent", ctx, event, eventTime)
}

// SendHostEvent indicates an expected call of SendHostEvent
func (mr *MockHandlerMockRecorder) SendHostEvent(ctx, event, eventTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHostEvent", reflect.TypeOf((*MockHandler)(nil).SendHostEvent), ctx, event, eventTime)
}

// GetEvents mocks base method
func (m *MockHandler) GetEvents(clusterID strfmt.UUID, hostID *strfmt.UUID) ([]*common.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", clusterID, hostID)
	ret0, _ := ret[0].([]*common.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockHandlerMockRecorder) GetEvents(clusterID, hostID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockHandler)(nil).GetEvents), clusterID, hostID)
}

// MockBaseEvent is a mock of BaseEvent interface
type MockBaseEvent struct {
	ctrl     *gomock.Controller
	recorder *MockBaseEventMockRecorder
}

// MockBaseEventMockRecorder is the mock recorder for MockBaseEvent
type MockBaseEventMockRecorder struct {
	mock *MockBaseEvent
}

// NewMockBaseEvent creates a new mock instance
func NewMockBaseEvent(ctrl *gomock.Controller) *MockBaseEvent {
	mock := &MockBaseEvent{ctrl: ctrl}
	mock.recorder = &MockBaseEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseEvent) EXPECT() *MockBaseEventMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockBaseEvent) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockBaseEventMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockBaseEvent)(nil).GetId))
}

// GetSeverity mocks base method
func (m *MockBaseEvent) GetSeverity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeverity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSeverity indicates an expected call of GetSeverity
func (mr *MockBaseEventMockRecorder) GetSeverity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeverity", reflect.TypeOf((*MockBaseEvent)(nil).GetSeverity))
}

// FormatMessage mocks base method
func (m *MockBaseEvent) FormatMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatMessage indicates an expected call of FormatMessage
func (mr *MockBaseEventMockRecorder) FormatMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatMessage", reflect.TypeOf((*MockBaseEvent)(nil).FormatMessage))
}

// FormatLogMessage mocks base method
func (m *MockBaseEvent) FormatLogMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatLogMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatLogMessage indicates an expected call of FormatLogMessage
func (mr *MockBaseEventMockRecorder) FormatLogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatLogMessage", reflect.TypeOf((*MockBaseEvent)(nil).FormatLogMessage))
}

// MockClusterEvent is a mock of ClusterEvent interface
type MockClusterEvent struct {
	ctrl     *gomock.Controller
	recorder *MockClusterEventMockRecorder
}

// MockClusterEventMockRecorder is the mock recorder for MockClusterEvent
type MockClusterEventMockRecorder struct {
	mock *MockClusterEvent
}

// NewMockClusterEvent creates a new mock instance
func NewMockClusterEvent(ctrl *gomock.Controller) *MockClusterEvent {
	mock := &MockClusterEvent{ctrl: ctrl}
	mock.recorder = &MockClusterEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterEvent) EXPECT() *MockClusterEventMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockClusterEvent) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockClusterEventMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockClusterEvent)(nil).GetId))
}

// GetSeverity mocks base method
func (m *MockClusterEvent) GetSeverity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeverity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSeverity indicates an expected call of GetSeverity
func (mr *MockClusterEventMockRecorder) GetSeverity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeverity", reflect.TypeOf((*MockClusterEvent)(nil).GetSeverity))
}

// FormatMessage mocks base method
func (m *MockClusterEvent) FormatMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatMessage indicates an expected call of FormatMessage
func (mr *MockClusterEventMockRecorder) FormatMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatMessage", reflect.TypeOf((*MockClusterEvent)(nil).FormatMessage))
}

// FormatLogMessage mocks base method
func (m *MockClusterEvent) FormatLogMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatLogMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatLogMessage indicates an expected call of FormatLogMessage
func (mr *MockClusterEventMockRecorder) FormatLogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatLogMessage", reflect.TypeOf((*MockClusterEvent)(nil).FormatLogMessage))
}

// GetClusterId mocks base method
func (m *MockClusterEvent) GetClusterId() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterId")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetClusterId indicates an expected call of GetClusterId
func (mr *MockClusterEventMockRecorder) GetClusterId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterId", reflect.TypeOf((*MockClusterEvent)(nil).GetClusterId))
}

// MockHostEvent is a mock of HostEvent interface
type MockHostEvent struct {
	ctrl     *gomock.Controller
	recorder *MockHostEventMockRecorder
}

// MockHostEventMockRecorder is the mock recorder for MockHostEvent
type MockHostEventMockRecorder struct {
	mock *MockHostEvent
}

// NewMockHostEvent creates a new mock instance
func NewMockHostEvent(ctrl *gomock.Controller) *MockHostEvent {
	mock := &MockHostEvent{ctrl: ctrl}
	mock.recorder = &MockHostEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostEvent) EXPECT() *MockHostEventMockRecorder {
	return m.recorder
}

// GetId mocks base method
func (m *MockHostEvent) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockHostEventMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockHostEvent)(nil).GetId))
}

// GetSeverity mocks base method
func (m *MockHostEvent) GetSeverity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeverity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSeverity indicates an expected call of GetSeverity
func (mr *MockHostEventMockRecorder) GetSeverity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeverity", reflect.TypeOf((*MockHostEvent)(nil).GetSeverity))
}

// FormatMessage mocks base method
func (m *MockHostEvent) FormatMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatMessage indicates an expected call of FormatMessage
func (mr *MockHostEventMockRecorder) FormatMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatMessage", reflect.TypeOf((*MockHostEvent)(nil).FormatMessage))
}

// FormatLogMessage mocks base method
func (m *MockHostEvent) FormatLogMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatLogMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatLogMessage indicates an expected call of FormatLogMessage
func (mr *MockHostEventMockRecorder) FormatLogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatLogMessage", reflect.TypeOf((*MockHostEvent)(nil).FormatLogMessage))
}

// GetClusterId mocks base method
func (m *MockHostEvent) GetClusterId() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterId")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetClusterId indicates an expected call of GetClusterId
func (mr *MockHostEventMockRecorder) GetClusterId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterId", reflect.TypeOf((*MockHostEvent)(nil).GetClusterId))
}

// GetHostId mocks base method
func (m *MockHostEvent) GetHostId() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostId")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetHostId indicates an expected call of GetHostId
func (mr *MockHostEventMockRecorder) GetHostId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostId", reflect.TypeOf((*MockHostEvent)(nil).GetHostId))
}
