// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/kubeclients (interfaces: ClusterKubeClient)

// Package kubeclients is a generated GoMock package.
package kubeclients

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockClusterKubeClient is a mock of ClusterKubeClient interface.
type MockClusterKubeClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterKubeClientMockRecorder
}

// MockClusterKubeClientMockRecorder is the mock recorder for MockClusterKubeClient.
type MockClusterKubeClientMockRecorder struct {
	mock *MockClusterKubeClient
}

// NewMockClusterKubeClient creates a new mock instance.
func NewMockClusterKubeClient(ctrl *gomock.Controller) *MockClusterKubeClient {
	mock := &MockClusterKubeClient{ctrl: ctrl}
	mock.recorder = &MockClusterKubeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterKubeClient) EXPECT() *MockClusterKubeClientMockRecorder {
	return m.recorder
}

// ApproveAllCsrs mocks base method.
func (m *MockClusterKubeClient) ApproveAllCsrs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveAllCsrs")
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveAllCsrs indicates an expected call of ApproveAllCsrs.
func (mr *MockClusterKubeClientMockRecorder) ApproveAllCsrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAllCsrs", reflect.TypeOf((*MockClusterKubeClient)(nil).ApproveAllCsrs))
}

// ListNodes mocks base method.
func (m *MockClusterKubeClient) ListNodes() (*v1.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].(*v1.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockClusterKubeClientMockRecorder) ListNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockClusterKubeClient)(nil).ListNodes))
}
