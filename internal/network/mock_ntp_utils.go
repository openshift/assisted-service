// Code generated by MockGen. DO NOT EDIT.
// Source: ntp_utils.go

// Package network is a generated GoMock package.
package network

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockNtpUtilsAPI is a mock of NtpUtilsAPI interface
type MockNtpUtilsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNtpUtilsAPIMockRecorder
}

// MockNtpUtilsAPIMockRecorder is the mock recorder for MockNtpUtilsAPI
type MockNtpUtilsAPIMockRecorder struct {
	mock *MockNtpUtilsAPI
}

// NewMockNtpUtilsAPI creates a new mock instance
func NewMockNtpUtilsAPI(ctrl *gomock.Controller) *MockNtpUtilsAPI {
	mock := &MockNtpUtilsAPI{ctrl: ctrl}
	mock.recorder = &MockNtpUtilsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNtpUtilsAPI) EXPECT() *MockNtpUtilsAPIMockRecorder {
	return m.recorder
}

// AddChronyManifest mocks base method
func (m *MockNtpUtilsAPI) AddChronyManifest(ctx context.Context, log logrus.FieldLogger, c *common.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChronyManifest", ctx, log, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChronyManifest indicates an expected call of AddChronyManifest
func (mr *MockNtpUtilsAPIMockRecorder) AddChronyManifest(ctx, log, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChronyManifest", reflect.TypeOf((*MockNtpUtilsAPI)(nil).AddChronyManifest), ctx, log, c)
}
