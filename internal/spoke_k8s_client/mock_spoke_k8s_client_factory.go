// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/spoke_k8s_client (interfaces: SpokeK8sClientFactory)

// Package spoke_k8s_client is a generated GoMock package.
package spoke_k8s_client

import (
	context "context"
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	s3wrapper "github.com/openshift/assisted-service/pkg/s3wrapper"
	v1 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockSpokeK8sClientFactory is a mock of SpokeK8sClientFactory interface.
type MockSpokeK8sClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSpokeK8sClientFactoryMockRecorder
}

// MockSpokeK8sClientFactoryMockRecorder is the mock recorder for MockSpokeK8sClientFactory.
type MockSpokeK8sClientFactoryMockRecorder struct {
	mock *MockSpokeK8sClientFactory
}

// NewMockSpokeK8sClientFactory creates a new mock instance.
func NewMockSpokeK8sClientFactory(ctrl *gomock.Controller) *MockSpokeK8sClientFactory {
	mock := &MockSpokeK8sClientFactory{ctrl: ctrl}
	mock.recorder = &MockSpokeK8sClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpokeK8sClientFactory) EXPECT() *MockSpokeK8sClientFactoryMockRecorder {
	return m.recorder
}

// ClientAndSetFromSecret mocks base method.
func (m *MockSpokeK8sClientFactory) ClientAndSetFromSecret(arg0 *v1.Secret) (SpokeK8sClient, *kubernetes.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientAndSetFromSecret", arg0)
	ret0, _ := ret[0].(SpokeK8sClient)
	ret1, _ := ret[1].(*kubernetes.Clientset)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClientAndSetFromSecret indicates an expected call of ClientAndSetFromSecret.
func (mr *MockSpokeK8sClientFactoryMockRecorder) ClientAndSetFromSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientAndSetFromSecret", reflect.TypeOf((*MockSpokeK8sClientFactory)(nil).ClientAndSetFromSecret), arg0)
}

// CreateFromRawKubeconfig mocks base method.
func (m *MockSpokeK8sClientFactory) CreateFromRawKubeconfig(arg0 []byte) (SpokeK8sClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromRawKubeconfig", arg0)
	ret0, _ := ret[0].(SpokeK8sClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromRawKubeconfig indicates an expected call of CreateFromRawKubeconfig.
func (mr *MockSpokeK8sClientFactoryMockRecorder) CreateFromRawKubeconfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromRawKubeconfig", reflect.TypeOf((*MockSpokeK8sClientFactory)(nil).CreateFromRawKubeconfig), arg0)
}

// CreateFromSecret mocks base method.
func (m *MockSpokeK8sClientFactory) CreateFromSecret(arg0 *v1.Secret) (SpokeK8sClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromSecret", arg0)
	ret0, _ := ret[0].(SpokeK8sClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromSecret indicates an expected call of CreateFromSecret.
func (mr *MockSpokeK8sClientFactoryMockRecorder) CreateFromSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromSecret", reflect.TypeOf((*MockSpokeK8sClientFactory)(nil).CreateFromSecret), arg0)
}

// CreateFromStorageKubeconfig mocks base method.
func (m *MockSpokeK8sClientFactory) CreateFromStorageKubeconfig(arg0 context.Context, arg1 *strfmt.UUID, arg2 s3wrapper.API) (SpokeK8sClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromStorageKubeconfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(SpokeK8sClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromStorageKubeconfig indicates an expected call of CreateFromStorageKubeconfig.
func (mr *MockSpokeK8sClientFactoryMockRecorder) CreateFromStorageKubeconfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromStorageKubeconfig", reflect.TypeOf((*MockSpokeK8sClientFactory)(nil).CreateFromStorageKubeconfig), arg0, arg1, arg2)
}
