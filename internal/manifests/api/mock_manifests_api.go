// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/manifests/api (interfaces: ManifestsAPI)

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	manifests "github.com/openshift/assisted-service/restapi/operations/manifests"
)

// MockManifestsAPI is a mock of ManifestsAPI interface.
type MockManifestsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManifestsAPIMockRecorder
}

// MockManifestsAPIMockRecorder is the mock recorder for MockManifestsAPI.
type MockManifestsAPIMockRecorder struct {
	mock *MockManifestsAPI
}

// NewMockManifestsAPI creates a new mock instance.
func NewMockManifestsAPI(ctrl *gomock.Controller) *MockManifestsAPI {
	mock := &MockManifestsAPI{ctrl: ctrl}
	mock.recorder = &MockManifestsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestsAPI) EXPECT() *MockManifestsAPIMockRecorder {
	return m.recorder
}

// CreateClusterManifestInternal mocks base method.
func (m *MockManifestsAPI) CreateClusterManifestInternal(arg0 context.Context, arg1 manifests.V2CreateClusterManifestParams, arg2 bool) (*models.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterManifestInternal", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterManifestInternal indicates an expected call of CreateClusterManifestInternal.
func (mr *MockManifestsAPIMockRecorder) CreateClusterManifestInternal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterManifestInternal", reflect.TypeOf((*MockManifestsAPI)(nil).CreateClusterManifestInternal), arg0, arg1, arg2)
}

// DeleteClusterManifestInternal mocks base method.
func (m *MockManifestsAPI) DeleteClusterManifestInternal(arg0 context.Context, arg1 manifests.V2DeleteClusterManifestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterManifestInternal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterManifestInternal indicates an expected call of DeleteClusterManifestInternal.
func (mr *MockManifestsAPIMockRecorder) DeleteClusterManifestInternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterManifestInternal", reflect.TypeOf((*MockManifestsAPI)(nil).DeleteClusterManifestInternal), arg0, arg1)
}

// IsUserManifest mocks base method.
func (m *MockManifestsAPI) IsUserManifest(arg0 context.Context, arg1 strfmt.UUID, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserManifest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserManifest indicates an expected call of IsUserManifest.
func (mr *MockManifestsAPIMockRecorder) IsUserManifest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserManifest", reflect.TypeOf((*MockManifestsAPI)(nil).IsUserManifest), arg0, arg1, arg2, arg3)
}

// ListClusterManifestsInternal mocks base method.
func (m *MockManifestsAPI) ListClusterManifestsInternal(arg0 context.Context, arg1 manifests.V2ListClusterManifestsParams) (models.ListManifests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterManifestsInternal", arg0, arg1)
	ret0, _ := ret[0].(models.ListManifests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterManifestsInternal indicates an expected call of ListClusterManifestsInternal.
func (mr *MockManifestsAPIMockRecorder) ListClusterManifestsInternal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterManifestsInternal", reflect.TypeOf((*MockManifestsAPI)(nil).ListClusterManifestsInternal), arg0, arg1)
}

// V2CreateClusterManifest mocks base method.
func (m *MockManifestsAPI) V2CreateClusterManifest(arg0 context.Context, arg1 manifests.V2CreateClusterManifestParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2CreateClusterManifest", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2CreateClusterManifest indicates an expected call of V2CreateClusterManifest.
func (mr *MockManifestsAPIMockRecorder) V2CreateClusterManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2CreateClusterManifest", reflect.TypeOf((*MockManifestsAPI)(nil).V2CreateClusterManifest), arg0, arg1)
}

// V2DeleteClusterManifest mocks base method.
func (m *MockManifestsAPI) V2DeleteClusterManifest(arg0 context.Context, arg1 manifests.V2DeleteClusterManifestParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2DeleteClusterManifest", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2DeleteClusterManifest indicates an expected call of V2DeleteClusterManifest.
func (mr *MockManifestsAPIMockRecorder) V2DeleteClusterManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2DeleteClusterManifest", reflect.TypeOf((*MockManifestsAPI)(nil).V2DeleteClusterManifest), arg0, arg1)
}

// V2DownloadClusterManifest mocks base method.
func (m *MockManifestsAPI) V2DownloadClusterManifest(arg0 context.Context, arg1 manifests.V2DownloadClusterManifestParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2DownloadClusterManifest", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2DownloadClusterManifest indicates an expected call of V2DownloadClusterManifest.
func (mr *MockManifestsAPIMockRecorder) V2DownloadClusterManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2DownloadClusterManifest", reflect.TypeOf((*MockManifestsAPI)(nil).V2DownloadClusterManifest), arg0, arg1)
}

// V2ListClusterManifests mocks base method.
func (m *MockManifestsAPI) V2ListClusterManifests(arg0 context.Context, arg1 manifests.V2ListClusterManifestsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2ListClusterManifests", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2ListClusterManifests indicates an expected call of V2ListClusterManifests.
func (mr *MockManifestsAPIMockRecorder) V2ListClusterManifests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2ListClusterManifests", reflect.TypeOf((*MockManifestsAPI)(nil).V2ListClusterManifests), arg0, arg1)
}

// V2UpdateClusterManifest mocks base method.
func (m *MockManifestsAPI) V2UpdateClusterManifest(arg0 context.Context, arg1 manifests.V2UpdateClusterManifestParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2UpdateClusterManifest", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2UpdateClusterManifest indicates an expected call of V2UpdateClusterManifest.
func (mr *MockManifestsAPIMockRecorder) V2UpdateClusterManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2UpdateClusterManifest", reflect.TypeOf((*MockManifestsAPI)(nil).V2UpdateClusterManifest), arg0, arg1)
}
