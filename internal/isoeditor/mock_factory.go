// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/isoeditor (interfaces: Factory)

// Package isoeditor is a generated GoMock package.
package isoeditor

import (
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewEditor mocks base method
func (m *MockFactory) NewEditor(arg0, arg1 string, arg2 logrus.FieldLogger) (Editor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEditor", arg0, arg1, arg2)
	ret0, _ := ret[0].(Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEditor indicates an expected call of NewEditor
func (mr *MockFactoryMockRecorder) NewEditor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEditor", reflect.TypeOf((*MockFactory)(nil).NewEditor), arg0, arg1, arg2)
}
