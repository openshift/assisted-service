// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package hardware is a generated GoMock package.
package hardware

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// GetHostValidDisks mocks base method
func (m *MockValidator) GetHostValidDisks(host *models.Host) ([]*models.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostValidDisks", host)
	ret0, _ := ret[0].([]*models.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostValidDisks indicates an expected call of GetHostValidDisks
func (mr *MockValidatorMockRecorder) GetHostValidDisks(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostValidDisks", reflect.TypeOf((*MockValidator)(nil).GetHostValidDisks), host)
}

// GetHostRequirements mocks base method
func (m *MockValidator) GetHostRequirements(role models.HostRole) models.HostRequirementsRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRequirements", role)
	ret0, _ := ret[0].(models.HostRequirementsRole)
	return ret0
}

// GetHostRequirements indicates an expected call of GetHostRequirements
func (mr *MockValidatorMockRecorder) GetHostRequirements(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRequirements", reflect.TypeOf((*MockValidator)(nil).GetHostRequirements), role)
}

// DiskIsEligible mocks base method
func (m *MockValidator) DiskIsEligible(disk *models.Disk) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskIsEligible", disk)
	ret0, _ := ret[0].([]string)
	return ret0
}

// DiskIsEligible indicates an expected call of DiskIsEligible
func (mr *MockValidatorMockRecorder) DiskIsEligible(disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskIsEligible", reflect.TypeOf((*MockValidator)(nil).DiskIsEligible), disk)
}

// ListEligibleDisks mocks base method
func (m *MockValidator) ListEligibleDisks(inventory *models.Inventory) []*models.Disk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEligibleDisks", inventory)
	ret0, _ := ret[0].([]*models.Disk)
	return ret0
}

// ListEligibleDisks indicates an expected call of ListEligibleDisks
func (mr *MockValidatorMockRecorder) ListEligibleDisks(inventory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEligibleDisks", reflect.TypeOf((*MockValidator)(nil).ListEligibleDisks), inventory)
}
