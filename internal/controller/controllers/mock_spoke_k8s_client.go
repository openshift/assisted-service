// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/controller/controllers (interfaces: SpokeK8sClient)

// Package controllers is a generated GoMock package.
package controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/certificates/v1"
	v10 "k8s.io/api/core/v1"
)

// MockSpokeK8sClient is a mock of SpokeK8sClient interface.
type MockSpokeK8sClient struct {
	ctrl     *gomock.Controller
	recorder *MockSpokeK8sClientMockRecorder
}

// MockSpokeK8sClientMockRecorder is the mock recorder for MockSpokeK8sClient.
type MockSpokeK8sClientMockRecorder struct {
	mock *MockSpokeK8sClient
}

// NewMockSpokeK8sClient creates a new mock instance.
func NewMockSpokeK8sClient(ctrl *gomock.Controller) *MockSpokeK8sClient {
	mock := &MockSpokeK8sClient{ctrl: ctrl}
	mock.recorder = &MockSpokeK8sClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpokeK8sClient) EXPECT() *MockSpokeK8sClientMockRecorder {
	return m.recorder
}

// ApproveCsr mocks base method.
func (m *MockSpokeK8sClient) ApproveCsr(arg0 *v1.CertificateSigningRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveCsr", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveCsr indicates an expected call of ApproveCsr.
func (mr *MockSpokeK8sClientMockRecorder) ApproveCsr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveCsr", reflect.TypeOf((*MockSpokeK8sClient)(nil).ApproveCsr), arg0)
}

// GetNode mocks base method.
func (m *MockSpokeK8sClient) GetNode(arg0 string) (*v10.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSpokeK8sClientMockRecorder) GetNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSpokeK8sClient)(nil).GetNode), arg0)
}

// ListCsrs mocks base method.
func (m *MockSpokeK8sClient) ListCsrs() (*v1.CertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCsrs")
	ret0, _ := ret[0].(*v1.CertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCsrs indicates an expected call of ListCsrs.
func (mr *MockSpokeK8sClientMockRecorder) ListCsrs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCsrs", reflect.TypeOf((*MockSpokeK8sClient)(nil).ListCsrs))
}
