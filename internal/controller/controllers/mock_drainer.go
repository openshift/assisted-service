// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/controller/controllers (interfaces: Drainer)

// Package controllers is a generated GoMock package.
package controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	drain "k8s.io/kubectl/pkg/drain"
)

// MockDrainer is a mock of Drainer interface.
type MockDrainer struct {
	ctrl     *gomock.Controller
	recorder *MockDrainerMockRecorder
}

// MockDrainerMockRecorder is the mock recorder for MockDrainer.
type MockDrainerMockRecorder struct {
	mock *MockDrainer
}

// NewMockDrainer creates a new mock instance.
func NewMockDrainer(ctrl *gomock.Controller) *MockDrainer {
	mock := &MockDrainer{ctrl: ctrl}
	mock.recorder = &MockDrainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrainer) EXPECT() *MockDrainerMockRecorder {
	return m.recorder
}

// RunCordonOrUncordon mocks base method.
func (m *MockDrainer) RunCordonOrUncordon(arg0 *drain.Helper, arg1 *v1.Node, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCordonOrUncordon", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCordonOrUncordon indicates an expected call of RunCordonOrUncordon.
func (mr *MockDrainerMockRecorder) RunCordonOrUncordon(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCordonOrUncordon", reflect.TypeOf((*MockDrainer)(nil).RunCordonOrUncordon), arg0, arg1, arg2)
}

// RunNodeDrain mocks base method.
func (m *MockDrainer) RunNodeDrain(arg0 *drain.Helper, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunNodeDrain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunNodeDrain indicates an expected call of RunNodeDrain.
func (mr *MockDrainerMockRecorder) RunNodeDrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunNodeDrain", reflect.TypeOf((*MockDrainer)(nil).RunNodeDrain), arg0, arg1)
}
