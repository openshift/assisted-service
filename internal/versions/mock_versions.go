// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/versions (interfaces: Handler)

// Package versions is a generated GoMock package.
package versions

import (
	context "context"
	reflect "reflect"

	middleware "github.com/go-openapi/runtime/middleware"
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	versions0 "github.com/openshift/assisted-service/restapi/operations/versions"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddOpenshiftVersion mocks base method.
func (m *MockHandler) AddOpenshiftVersion(arg0, arg1 string) (*models.OpenshiftVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenshiftVersion", arg0, arg1)
	ret0, _ := ret[0].(*models.OpenshiftVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOpenshiftVersion indicates an expected call of AddOpenshiftVersion.
func (mr *MockHandlerMockRecorder) AddOpenshiftVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenshiftVersion", reflect.TypeOf((*MockHandler)(nil).AddOpenshiftVersion), arg0, arg1)
}

// GetKey mocks base method.
func (m *MockHandler) GetKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockHandlerMockRecorder) GetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockHandler)(nil).GetKey), arg0)
}

// GetMustGatherImages mocks base method.
func (m *MockHandler) GetMustGatherImages(arg0, arg1 string) (MustGatherVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMustGatherImages", arg0, arg1)
	ret0, _ := ret[0].(MustGatherVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMustGatherImages indicates an expected call of GetMustGatherImages.
func (mr *MockHandlerMockRecorder) GetMustGatherImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMustGatherImages", reflect.TypeOf((*MockHandler)(nil).GetMustGatherImages), arg0, arg1)
}

// GetOpenshiftVersion mocks base method.
func (m *MockHandler) GetOpenshiftVersion(arg0 string) (*models.OpenshiftVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshiftVersion", arg0)
	ret0, _ := ret[0].(*models.OpenshiftVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenshiftVersion indicates an expected call of GetOpenshiftVersion.
func (mr *MockHandlerMockRecorder) GetOpenshiftVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshiftVersion", reflect.TypeOf((*MockHandler)(nil).GetOpenshiftVersion), arg0)
}

// GetOsImage mocks base method.
func (m *MockHandler) GetOsImage(arg0 string) (*models.OsImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsImage", arg0)
	ret0, _ := ret[0].(*models.OsImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsImage indicates an expected call of GetOsImage.
func (mr *MockHandlerMockRecorder) GetOsImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsImage", reflect.TypeOf((*MockHandler)(nil).GetOsImage), arg0)
}

// IsOpenshiftVersionSupported mocks base method.
func (m *MockHandler) IsOpenshiftVersionSupported(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftVersionSupported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftVersionSupported indicates an expected call of IsOpenshiftVersionSupported.
func (mr *MockHandlerMockRecorder) IsOpenshiftVersionSupported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftVersionSupported", reflect.TypeOf((*MockHandler)(nil).IsOpenshiftVersionSupported), arg0)
}

// ListComponentVersions mocks base method.
func (m *MockHandler) ListComponentVersions(arg0 context.Context, arg1 versions0.ListComponentVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListComponentVersions indicates an expected call of ListComponentVersions.
func (mr *MockHandlerMockRecorder) ListComponentVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentVersions", reflect.TypeOf((*MockHandler)(nil).ListComponentVersions), arg0, arg1)
}

// ListSupportedOpenshiftVersions mocks base method.
func (m *MockHandler) ListSupportedOpenshiftVersions(arg0 context.Context, arg1 versions0.ListSupportedOpenshiftVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedOpenshiftVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListSupportedOpenshiftVersions indicates an expected call of ListSupportedOpenshiftVersions.
func (mr *MockHandlerMockRecorder) ListSupportedOpenshiftVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedOpenshiftVersions", reflect.TypeOf((*MockHandler)(nil).ListSupportedOpenshiftVersions), arg0, arg1)
}
