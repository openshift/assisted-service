// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/versions (interfaces: Handler)

// Package versions is a generated GoMock package.
package versions

import (
	context "context"
	middleware "github.com/go-openapi/runtime/middleware"
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	versions "github.com/openshift/assisted-service/restapi/operations/versions"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddOpenshiftVersion mocks base method
func (m *MockHandler) AddOpenshiftVersion(arg0, arg1 string) (*models.OpenshiftVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenshiftVersion", arg0, arg1)
	ret0, _ := ret[0].(*models.OpenshiftVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOpenshiftVersion indicates an expected call of AddOpenshiftVersion
func (mr *MockHandlerMockRecorder) AddOpenshiftVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenshiftVersion", reflect.TypeOf((*MockHandler)(nil).AddOpenshiftVersion), arg0, arg1)
}

// GetKey mocks base method
func (m *MockHandler) GetKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockHandlerMockRecorder) GetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockHandler)(nil).GetKey), arg0)
}

// GetRHCOSImage mocks base method
func (m *MockHandler) GetRHCOSImage(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRHCOSImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRHCOSImage indicates an expected call of GetRHCOSImage
func (mr *MockHandlerMockRecorder) GetRHCOSImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRHCOSImage", reflect.TypeOf((*MockHandler)(nil).GetRHCOSImage), arg0)
}

// GetRHCOSVersion mocks base method
func (m *MockHandler) GetRHCOSVersion(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRHCOSVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRHCOSVersion indicates an expected call of GetRHCOSVersion
func (mr *MockHandlerMockRecorder) GetRHCOSVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRHCOSVersion", reflect.TypeOf((*MockHandler)(nil).GetRHCOSVersion), arg0)
}

// GetReleaseImage mocks base method
func (m *MockHandler) GetReleaseImage(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseImage indicates an expected call of GetReleaseImage
func (mr *MockHandlerMockRecorder) GetReleaseImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseImage", reflect.TypeOf((*MockHandler)(nil).GetReleaseImage), arg0)
}

// GetReleaseVersion mocks base method
func (m *MockHandler) GetReleaseVersion(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseVersion indicates an expected call of GetReleaseVersion
func (mr *MockHandlerMockRecorder) GetReleaseVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseVersion", reflect.TypeOf((*MockHandler)(nil).GetReleaseVersion), arg0)
}

// GetVersion mocks base method
func (m *MockHandler) GetVersion(arg0 string) (*models.OpenshiftVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(*models.OpenshiftVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockHandlerMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockHandler)(nil).GetVersion), arg0)
}

// IsOpenshiftVersionSupported mocks base method
func (m *MockHandler) IsOpenshiftVersionSupported(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftVersionSupported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftVersionSupported indicates an expected call of IsOpenshiftVersionSupported
func (mr *MockHandlerMockRecorder) IsOpenshiftVersionSupported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftVersionSupported", reflect.TypeOf((*MockHandler)(nil).IsOpenshiftVersionSupported), arg0)
}

// ListComponentVersions mocks base method
func (m *MockHandler) ListComponentVersions(arg0 context.Context, arg1 versions.ListComponentVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListComponentVersions indicates an expected call of ListComponentVersions
func (mr *MockHandlerMockRecorder) ListComponentVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentVersions", reflect.TypeOf((*MockHandler)(nil).ListComponentVersions), arg0, arg1)
}

// ListSupportedOpenshiftVersions mocks base method
func (m *MockHandler) ListSupportedOpenshiftVersions(arg0 context.Context, arg1 versions.ListSupportedOpenshiftVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedOpenshiftVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListSupportedOpenshiftVersions indicates an expected call of ListSupportedOpenshiftVersions
func (mr *MockHandlerMockRecorder) ListSupportedOpenshiftVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedOpenshiftVersions", reflect.TypeOf((*MockHandler)(nil).ListSupportedOpenshiftVersions), arg0, arg1)
}
