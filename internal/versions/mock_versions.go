// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/versions (interfaces: Handler)

// Package versions is a generated GoMock package.
package versions

import (
	context "context"
	reflect "reflect"

	middleware "github.com/go-openapi/runtime/middleware"
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	versions0 "github.com/openshift/assisted-service/restapi/operations/versions"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddReleaseImage mocks base method.
func (m *MockHandler) AddReleaseImage(arg0, arg1, arg2 string, arg3 []string) (*models.ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReleaseImage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReleaseImage indicates an expected call of AddReleaseImage.
func (mr *MockHandlerMockRecorder) AddReleaseImage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReleaseImage", reflect.TypeOf((*MockHandler)(nil).AddReleaseImage), arg0, arg1, arg2, arg3)
}

// GetCPUArchitectures mocks base method.
func (m *MockHandler) GetCPUArchitectures(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUArchitectures", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCPUArchitectures indicates an expected call of GetCPUArchitectures.
func (mr *MockHandlerMockRecorder) GetCPUArchitectures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUArchitectures", reflect.TypeOf((*MockHandler)(nil).GetCPUArchitectures), arg0)
}

// GetDefaultReleaseImage mocks base method.
func (m *MockHandler) GetDefaultReleaseImage(arg0 string) (*models.ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultReleaseImage", arg0)
	ret0, _ := ret[0].(*models.ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultReleaseImage indicates an expected call of GetDefaultReleaseImage.
func (mr *MockHandlerMockRecorder) GetDefaultReleaseImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultReleaseImage", reflect.TypeOf((*MockHandler)(nil).GetDefaultReleaseImage), arg0)
}

// GetLatestOsImage mocks base method.
func (m *MockHandler) GetLatestOsImage(arg0 string) (*models.OsImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestOsImage", arg0)
	ret0, _ := ret[0].(*models.OsImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestOsImage indicates an expected call of GetLatestOsImage.
func (mr *MockHandlerMockRecorder) GetLatestOsImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestOsImage", reflect.TypeOf((*MockHandler)(nil).GetLatestOsImage), arg0)
}

// GetMustGatherImages mocks base method.
func (m *MockHandler) GetMustGatherImages(arg0, arg1, arg2 string) (MustGatherVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMustGatherImages", arg0, arg1, arg2)
	ret0, _ := ret[0].(MustGatherVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMustGatherImages indicates an expected call of GetMustGatherImages.
func (mr *MockHandlerMockRecorder) GetMustGatherImages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMustGatherImages", reflect.TypeOf((*MockHandler)(nil).GetMustGatherImages), arg0, arg1, arg2)
}

// GetOpenshiftVersions mocks base method.
func (m *MockHandler) GetOpenshiftVersions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshiftVersions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOpenshiftVersions indicates an expected call of GetOpenshiftVersions.
func (mr *MockHandlerMockRecorder) GetOpenshiftVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshiftVersions", reflect.TypeOf((*MockHandler)(nil).GetOpenshiftVersions))
}

// GetOsImage mocks base method.
func (m *MockHandler) GetOsImage(arg0, arg1 string) (*models.OsImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsImage", arg0, arg1)
	ret0, _ := ret[0].(*models.OsImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsImage indicates an expected call of GetOsImage.
func (mr *MockHandlerMockRecorder) GetOsImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsImage", reflect.TypeOf((*MockHandler)(nil).GetOsImage), arg0, arg1)
}

// GetOsImageOrLatest mocks base method.
func (m *MockHandler) GetOsImageOrLatest(arg0, arg1 string) (*models.OsImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsImageOrLatest", arg0, arg1)
	ret0, _ := ret[0].(*models.OsImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsImageOrLatest indicates an expected call of GetOsImageOrLatest.
func (mr *MockHandlerMockRecorder) GetOsImageOrLatest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsImageOrLatest", reflect.TypeOf((*MockHandler)(nil).GetOsImageOrLatest), arg0, arg1)
}

// GetReleaseImage mocks base method.
func (m *MockHandler) GetReleaseImage(arg0, arg1 string) (*models.ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseImage", arg0, arg1)
	ret0, _ := ret[0].(*models.ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseImage indicates an expected call of GetReleaseImage.
func (mr *MockHandlerMockRecorder) GetReleaseImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseImage", reflect.TypeOf((*MockHandler)(nil).GetReleaseImage), arg0, arg1)
}

// V2ListComponentVersions mocks base method.
func (m *MockHandler) V2ListComponentVersions(arg0 context.Context, arg1 versions0.V2ListComponentVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2ListComponentVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2ListComponentVersions indicates an expected call of V2ListComponentVersions.
func (mr *MockHandlerMockRecorder) V2ListComponentVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2ListComponentVersions", reflect.TypeOf((*MockHandler)(nil).V2ListComponentVersions), arg0, arg1)
}

// V2ListSupportedOpenshiftVersions mocks base method.
func (m *MockHandler) V2ListSupportedOpenshiftVersions(arg0 context.Context, arg1 versions0.V2ListSupportedOpenshiftVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V2ListSupportedOpenshiftVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// V2ListSupportedOpenshiftVersions indicates an expected call of V2ListSupportedOpenshiftVersions.
func (mr *MockHandlerMockRecorder) V2ListSupportedOpenshiftVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V2ListSupportedOpenshiftVersions", reflect.TypeOf((*MockHandler)(nil).V2ListSupportedOpenshiftVersions), arg0, arg1)
}
