// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/versions (interfaces: Handler)

// Package versions is a generated GoMock package.
package versions

import (
	context "context"
	middleware "github.com/go-openapi/runtime/middleware"
	gomock "github.com/golang/mock/gomock"
	versions "github.com/openshift/assisted-service/restapi/operations/versions"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetReleaseImage mocks base method
func (m *MockHandler) GetReleaseImage(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseImage indicates an expected call of GetReleaseImage
func (mr *MockHandlerMockRecorder) GetReleaseImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseImage", reflect.TypeOf((*MockHandler)(nil).GetReleaseImage), arg0)
}

// IsOpenshiftVersionSupported mocks base method
func (m *MockHandler) IsOpenshiftVersionSupported(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftVersionSupported", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftVersionSupported indicates an expected call of IsOpenshiftVersionSupported
func (mr *MockHandlerMockRecorder) IsOpenshiftVersionSupported(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftVersionSupported", reflect.TypeOf((*MockHandler)(nil).IsOpenshiftVersionSupported), arg0)
}

// ListComponentVersions mocks base method
func (m *MockHandler) ListComponentVersions(arg0 context.Context, arg1 versions.ListComponentVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListComponentVersions indicates an expected call of ListComponentVersions
func (mr *MockHandlerMockRecorder) ListComponentVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentVersions", reflect.TypeOf((*MockHandler)(nil).ListComponentVersions), arg0, arg1)
}

// ListSupportedOpenshiftVersions mocks base method
func (m *MockHandler) ListSupportedOpenshiftVersions(arg0 context.Context, arg1 versions.ListSupportedOpenshiftVersionsParams) middleware.Responder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportedOpenshiftVersions", arg0, arg1)
	ret0, _ := ret[0].(middleware.Responder)
	return ret0
}

// ListSupportedOpenshiftVersions indicates an expected call of ListSupportedOpenshiftVersions
func (mr *MockHandlerMockRecorder) ListSupportedOpenshiftVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportedOpenshiftVersions", reflect.TypeOf((*MockHandler)(nil).ListSupportedOpenshiftVersions), arg0, arg1)
}
