// Code generated by MockGen. DO NOT EDIT.
// Source: requirements.go

// Package hardware is a generated GoMock package.
package hardware

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	models "github.com/openshift/assisted-service/models"
	reflect "reflect"
)

// MockRequirementsProvider is a mock of RequirementsProvider interface
type MockRequirementsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRequirementsProviderMockRecorder
}

// MockRequirementsProviderMockRecorder is the mock recorder for MockRequirementsProvider
type MockRequirementsProviderMockRecorder struct {
	mock *MockRequirementsProvider
}

// NewMockRequirementsProvider creates a new mock instance
func NewMockRequirementsProvider(ctrl *gomock.Controller) *MockRequirementsProvider {
	mock := &MockRequirementsProvider{ctrl: ctrl}
	mock.recorder = &MockRequirementsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequirementsProvider) EXPECT() *MockRequirementsProviderMockRecorder {
	return m.recorder
}

// GetOCPRequirementsForVersion mocks base method
func (m *MockRequirementsProvider) GetOCPRequirementsForVersion(cluster *common.Cluster) (*models.VersionedHostRequirements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOCPRequirementsForVersion", cluster)
	ret0, _ := ret[0].(*models.VersionedHostRequirements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOCPRequirementsForVersion indicates an expected call of GetOCPRequirementsForVersion
func (mr *MockRequirementsProviderMockRecorder) GetOCPRequirementsForVersion(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOCPRequirementsForVersion", reflect.TypeOf((*MockRequirementsProvider)(nil).GetOCPRequirementsForVersion), cluster)
}
