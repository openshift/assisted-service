// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/operators/openshiftai (interfaces: GPUVendor)

// Package openshiftai is a generated GoMock package.
package openshiftai

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	models "github.com/openshift/assisted-service/models"
)

// MockGPUVendor is a mock of GPUVendor interface.
type MockGPUVendor struct {
	ctrl     *gomock.Controller
	recorder *MockGPUVendorMockRecorder
}

// MockGPUVendorMockRecorder is the mock recorder for MockGPUVendor.
type MockGPUVendorMockRecorder struct {
	mock *MockGPUVendor
}

// NewMockGPUVendor creates a new mock instance.
func NewMockGPUVendor(ctrl *gomock.Controller) *MockGPUVendor {
	mock := &MockGPUVendor{ctrl: ctrl}
	mock.recorder = &MockGPUVendorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPUVendor) EXPECT() *MockGPUVendorMockRecorder {
	return m.recorder
}

// ClusterHasGPU mocks base method.
func (m *MockGPUVendor) ClusterHasGPU(arg0 *common.Cluster) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHasGPU", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterHasGPU indicates an expected call of ClusterHasGPU.
func (mr *MockGPUVendorMockRecorder) ClusterHasGPU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHasGPU", reflect.TypeOf((*MockGPUVendor)(nil).ClusterHasGPU), arg0)
}

// GetFeatureSupportID mocks base method.
func (m *MockGPUVendor) GetFeatureSupportID() models.FeatureSupportLevelID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureSupportID")
	ret0, _ := ret[0].(models.FeatureSupportLevelID)
	return ret0
}

// GetFeatureSupportID indicates an expected call of GetFeatureSupportID.
func (mr *MockGPUVendorMockRecorder) GetFeatureSupportID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureSupportID", reflect.TypeOf((*MockGPUVendor)(nil).GetFeatureSupportID))
}

// GetName mocks base method.
func (m *MockGPUVendor) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockGPUVendorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockGPUVendor)(nil).GetName))
}
