// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/internal/operators (interfaces: API)

// Package operators is a generated GoMock package.
package operators

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
	models "github.com/openshift/assisted-service/models"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AnyOperatorEnabled mocks base method
func (m *MockAPI) AnyOperatorEnabled(arg0 *common.Cluster) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnyOperatorEnabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AnyOperatorEnabled indicates an expected call of AnyOperatorEnabled
func (mr *MockAPIMockRecorder) AnyOperatorEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyOperatorEnabled", reflect.TypeOf((*MockAPI)(nil).AnyOperatorEnabled), arg0)
}

// GenerateManifests mocks base method
func (m *MockAPI) GenerateManifests(arg0 *common.Cluster) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateManifests", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateManifests indicates an expected call of GenerateManifests
func (mr *MockAPIMockRecorder) GenerateManifests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateManifests", reflect.TypeOf((*MockAPI)(nil).GenerateManifests), arg0)
}

// GetOperatorStatus mocks base method
func (m *MockAPI) GetOperatorStatus(arg0 *common.Cluster, arg1 models.OperatorType) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorStatus", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOperatorStatus indicates an expected call of GetOperatorStatus
func (mr *MockAPIMockRecorder) GetOperatorStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorStatus", reflect.TypeOf((*MockAPI)(nil).GetOperatorStatus), arg0, arg1)
}

// ValidateOCSRequirements mocks base method
func (m *MockAPI) ValidateOCSRequirements(arg0 *common.Cluster) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOCSRequirements", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateOCSRequirements indicates an expected call of ValidateOCSRequirements
func (mr *MockAPIMockRecorder) ValidateOCSRequirements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOCSRequirements", reflect.TypeOf((*MockAPI)(nil).ValidateOCSRequirements), arg0)
}
