// Code generated by MockGen. DO NOT EDIT.
// Source: validations.go

// Package ocs is a generated GoMock package.
package ocs

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
	reflect "reflect"
)

// MockOCSValidator is a mock of OCSValidator interface
type MockOCSValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOCSValidatorMockRecorder
}

// MockOCSValidatorMockRecorder is the mock recorder for MockOCSValidator
type MockOCSValidatorMockRecorder struct {
	mock *MockOCSValidator
}

// NewMockOCSValidator creates a new mock instance
func NewMockOCSValidator(ctrl *gomock.Controller) *MockOCSValidator {
	mock := &MockOCSValidator{ctrl: ctrl}
	mock.recorder = &MockOCSValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOCSValidator) EXPECT() *MockOCSValidatorMockRecorder {
	return m.recorder
}

// ValidateOCSRequirements mocks base method
func (m *MockOCSValidator) ValidateOCSRequirements(cluster *models.Cluster) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOCSRequirements", cluster)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateOCSRequirements indicates an expected call of ValidateOCSRequirements
func (mr *MockOCSValidatorMockRecorder) ValidateOCSRequirements(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOCSRequirements", reflect.TypeOf((*MockOCSValidator)(nil).ValidateOCSRequirements), cluster)
}
