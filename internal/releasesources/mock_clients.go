// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package releasesources is a generated GoMock package.
package releasesources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/openshift/assisted-service/models"
)

// MockopenShiftReleasesAPIClientInterface is a mock of openShiftReleasesAPIClientInterface interface.
type MockopenShiftReleasesAPIClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockopenShiftReleasesAPIClientInterfaceMockRecorder
}

// MockopenShiftReleasesAPIClientInterfaceMockRecorder is the mock recorder for MockopenShiftReleasesAPIClientInterface.
type MockopenShiftReleasesAPIClientInterfaceMockRecorder struct {
	mock *MockopenShiftReleasesAPIClientInterface
}

// NewMockopenShiftReleasesAPIClientInterface creates a new mock instance.
func NewMockopenShiftReleasesAPIClientInterface(ctrl *gomock.Controller) *MockopenShiftReleasesAPIClientInterface {
	mock := &MockopenShiftReleasesAPIClientInterface{ctrl: ctrl}
	mock.recorder = &MockopenShiftReleasesAPIClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockopenShiftReleasesAPIClientInterface) EXPECT() *MockopenShiftReleasesAPIClientInterfaceMockRecorder {
	return m.recorder
}

// getReleases mocks base method.
func (m *MockopenShiftReleasesAPIClientInterface) getReleases(channel models.ReleaseChannel, openshiftVersion, cpuArchitecture string) (*ReleaseGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getReleases", channel, openshiftVersion, cpuArchitecture)
	ret0, _ := ret[0].(*ReleaseGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getReleases indicates an expected call of getReleases.
func (mr *MockopenShiftReleasesAPIClientInterfaceMockRecorder) getReleases(channel, openshiftVersion, cpuArchitecture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getReleases", reflect.TypeOf((*MockopenShiftReleasesAPIClientInterface)(nil).getReleases), channel, openshiftVersion, cpuArchitecture)
}

// MockopenShiftSupportLevelAPIClientInterface is a mock of openShiftSupportLevelAPIClientInterface interface.
type MockopenShiftSupportLevelAPIClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockopenShiftSupportLevelAPIClientInterfaceMockRecorder
}

// MockopenShiftSupportLevelAPIClientInterfaceMockRecorder is the mock recorder for MockopenShiftSupportLevelAPIClientInterface.
type MockopenShiftSupportLevelAPIClientInterfaceMockRecorder struct {
	mock *MockopenShiftSupportLevelAPIClientInterface
}

// NewMockopenShiftSupportLevelAPIClientInterface creates a new mock instance.
func NewMockopenShiftSupportLevelAPIClientInterface(ctrl *gomock.Controller) *MockopenShiftSupportLevelAPIClientInterface {
	mock := &MockopenShiftSupportLevelAPIClientInterface{ctrl: ctrl}
	mock.recorder = &MockopenShiftSupportLevelAPIClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockopenShiftSupportLevelAPIClientInterface) EXPECT() *MockopenShiftSupportLevelAPIClientInterfaceMockRecorder {
	return m.recorder
}

// getSupportLevels mocks base method.
func (m *MockopenShiftSupportLevelAPIClientInterface) getSupportLevels(majorVersion string) (ocpVersionSupportLevels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSupportLevels", majorVersion)
	ret0, _ := ret[0].(ocpVersionSupportLevels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSupportLevels indicates an expected call of getSupportLevels.
func (mr *MockopenShiftSupportLevelAPIClientInterfaceMockRecorder) getSupportLevels(majorVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSupportLevels", reflect.TypeOf((*MockopenShiftSupportLevelAPIClientInterface)(nil).getSupportLevels), majorVersion)
}
