// Code generated by MockGen. DO NOT EDIT.
// Source: event_stream.go

// Package stream is a generated GoMock package.
package stream

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaProducer)(nil).Close))
}

// WriteMessages mocks base method.
func (m *MockKafkaProducer) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockKafkaProducerMockRecorder) WriteMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockKafkaProducer)(nil).WriteMessages), varargs...)
}

// MockEventStreamWriter is a mock of EventStreamWriter interface.
type MockEventStreamWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamWriterMockRecorder
}

// MockEventStreamWriterMockRecorder is the mock recorder for MockEventStreamWriter.
type MockEventStreamWriterMockRecorder struct {
	mock *MockEventStreamWriter
}

// NewMockEventStreamWriter creates a new mock instance.
func NewMockEventStreamWriter(ctrl *gomock.Controller) *MockEventStreamWriter {
	mock := &MockEventStreamWriter{ctrl: ctrl}
	mock.recorder = &MockEventStreamWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStreamWriter) EXPECT() *MockEventStreamWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventStreamWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventStreamWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventStreamWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockEventStreamWriter) Write(ctx context.Context, eventName string, key []byte, payload interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, eventName, key, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockEventStreamWriterMockRecorder) Write(ctx, eventName, key, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEventStreamWriter)(nil).Write), ctx, eventName, key, payload)
}
