// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/assisted-service/pkg/generator (interfaces: InstallConfigGenerator)

// Package generator is a generated GoMock package.
package generator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/assisted-service/internal/common"
)

// MockInstallConfigGenerator is a mock of InstallConfigGenerator interface.
type MockInstallConfigGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockInstallConfigGeneratorMockRecorder
}

// MockInstallConfigGeneratorMockRecorder is the mock recorder for MockInstallConfigGenerator.
type MockInstallConfigGeneratorMockRecorder struct {
	mock *MockInstallConfigGenerator
}

// NewMockInstallConfigGenerator creates a new mock instance.
func NewMockInstallConfigGenerator(ctrl *gomock.Controller) *MockInstallConfigGenerator {
	mock := &MockInstallConfigGenerator{ctrl: ctrl}
	mock.recorder = &MockInstallConfigGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallConfigGenerator) EXPECT() *MockInstallConfigGeneratorMockRecorder {
	return m.recorder
}

// GenerateInstallConfig mocks base method.
func (m *MockInstallConfigGenerator) GenerateInstallConfig(arg0 context.Context, arg1 common.Cluster, arg2 []byte, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInstallConfig", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateInstallConfig indicates an expected call of GenerateInstallConfig.
func (mr *MockInstallConfigGeneratorMockRecorder) GenerateInstallConfig(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInstallConfig", reflect.TypeOf((*MockInstallConfigGenerator)(nil).GenerateInstallConfig), arg0, arg1, arg2, arg3, arg4)
}
