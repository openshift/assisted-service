// Code generated by MockGen. DO NOT EDIT.
// Source: leaderelector.go

// Package leader is a generated GoMock package.
package leader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockElectorInterface is a mock of ElectorInterface interface
type MockElectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockElectorInterfaceMockRecorder
}

// MockElectorInterfaceMockRecorder is the mock recorder for MockElectorInterface
type MockElectorInterfaceMockRecorder struct {
	mock *MockElectorInterface
}

// NewMockElectorInterface creates a new mock instance
func NewMockElectorInterface(ctrl *gomock.Controller) *MockElectorInterface {
	mock := &MockElectorInterface{ctrl: ctrl}
	mock.recorder = &MockElectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElectorInterface) EXPECT() *MockElectorInterfaceMockRecorder {
	return m.recorder
}

// StartLeaderElection mocks base method
func (m *MockElectorInterface) StartLeaderElection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLeaderElection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLeaderElection indicates an expected call of StartLeaderElection
func (mr *MockElectorInterfaceMockRecorder) StartLeaderElection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLeaderElection", reflect.TypeOf((*MockElectorInterface)(nil).StartLeaderElection), ctx)
}

// IsLeader mocks base method
func (m *MockElectorInterface) IsLeader() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeader")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLeader indicates an expected call of IsLeader
func (mr *MockElectorInterfaceMockRecorder) IsLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockElectorInterface)(nil).IsLeader))
}
