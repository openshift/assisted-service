// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package s3wrapper is a generated GoMock package.
package s3wrapper

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// IsAwsS3 mocks base method
func (m *MockAPI) IsAwsS3() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAwsS3")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAwsS3 indicates an expected call of IsAwsS3
func (mr *MockAPIMockRecorder) IsAwsS3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAwsS3", reflect.TypeOf((*MockAPI)(nil).IsAwsS3))
}

// CreateBucket mocks base method
func (m *MockAPI) CreateBucket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket
func (mr *MockAPIMockRecorder) CreateBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockAPI)(nil).CreateBucket))
}

// Upload mocks base method
func (m *MockAPI) Upload(ctx context.Context, data []byte, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, data, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockAPIMockRecorder) Upload(ctx, data, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAPI)(nil).Upload), ctx, data, objectName)
}

// UploadStream mocks base method
func (m *MockAPI) UploadStream(ctx context.Context, reader io.Reader, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStream", ctx, reader, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadStream indicates an expected call of UploadStream
func (mr *MockAPIMockRecorder) UploadStream(ctx, reader, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStream", reflect.TypeOf((*MockAPI)(nil).UploadStream), ctx, reader, objectName)
}

// UploadFile mocks base method
func (m *MockAPI) UploadFile(ctx context.Context, filePath, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, filePath, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockAPIMockRecorder) UploadFile(ctx, filePath, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockAPI)(nil).UploadFile), ctx, filePath, objectName)
}

// UploadISO mocks base method
func (m *MockAPI) UploadISO(ctx context.Context, ignitionConfig, objectPrefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadISO", ctx, ignitionConfig, objectPrefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadISO indicates an expected call of UploadISO
func (mr *MockAPIMockRecorder) UploadISO(ctx, ignitionConfig, objectPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadISO", reflect.TypeOf((*MockAPI)(nil).UploadISO), ctx, ignitionConfig, objectPrefix)
}

// Download mocks base method
func (m *MockAPI) Download(ctx context.Context, objectName string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Download indicates an expected call of Download
func (mr *MockAPIMockRecorder) Download(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockAPI)(nil).Download), ctx, objectName)
}

// DoesObjectExist mocks base method
func (m *MockAPI) DoesObjectExist(ctx context.Context, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesObjectExist", ctx, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesObjectExist indicates an expected call of DoesObjectExist
func (mr *MockAPIMockRecorder) DoesObjectExist(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesObjectExist", reflect.TypeOf((*MockAPI)(nil).DoesObjectExist), ctx, objectName)
}

// DeleteObject mocks base method
func (m *MockAPI) DeleteObject(ctx context.Context, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockAPIMockRecorder) DeleteObject(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockAPI)(nil).DeleteObject), ctx, objectName)
}

// GetObjectSizeBytes mocks base method
func (m *MockAPI) GetObjectSizeBytes(ctx context.Context, objectName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectSizeBytes", ctx, objectName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectSizeBytes indicates an expected call of GetObjectSizeBytes
func (mr *MockAPIMockRecorder) GetObjectSizeBytes(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectSizeBytes", reflect.TypeOf((*MockAPI)(nil).GetObjectSizeBytes), ctx, objectName)
}

// GeneratePresignedDownloadURL mocks base method
func (m *MockAPI) GeneratePresignedDownloadURL(ctx context.Context, objectName, downloadFilename string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedDownloadURL", ctx, objectName, downloadFilename, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedDownloadURL indicates an expected call of GeneratePresignedDownloadURL
func (mr *MockAPIMockRecorder) GeneratePresignedDownloadURL(ctx, objectName, downloadFilename, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedDownloadURL", reflect.TypeOf((*MockAPI)(nil).GeneratePresignedDownloadURL), ctx, objectName, downloadFilename, duration)
}

// UpdateObjectTimestamp mocks base method
func (m *MockAPI) UpdateObjectTimestamp(ctx context.Context, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectTimestamp", ctx, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectTimestamp indicates an expected call of UpdateObjectTimestamp
func (mr *MockAPIMockRecorder) UpdateObjectTimestamp(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectTimestamp", reflect.TypeOf((*MockAPI)(nil).UpdateObjectTimestamp), ctx, objectName)
}

// ExpireObjects mocks base method
func (m *MockAPI) ExpireObjects(ctx context.Context, prefix string, deleteTime time.Duration, callback func(context.Context, logrus.FieldLogger, string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExpireObjects", ctx, prefix, deleteTime, callback)
}

// ExpireObjects indicates an expected call of ExpireObjects
func (mr *MockAPIMockRecorder) ExpireObjects(ctx, prefix, deleteTime, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireObjects", reflect.TypeOf((*MockAPI)(nil).ExpireObjects), ctx, prefix, deleteTime, callback)
}

// ListObjectsByPrefix mocks base method
func (m *MockAPI) ListObjectsByPrefix(ctx context.Context, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsByPrefix", ctx, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsByPrefix indicates an expected call of ListObjectsByPrefix
func (mr *MockAPIMockRecorder) ListObjectsByPrefix(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsByPrefix", reflect.TypeOf((*MockAPI)(nil).ListObjectsByPrefix), ctx, prefix)
}

// UploadBootFiles mocks base method
func (m *MockAPI) UploadBootFiles(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBootFiles", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBootFiles indicates an expected call of UploadBootFiles
func (mr *MockAPIMockRecorder) UploadBootFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBootFiles", reflect.TypeOf((*MockAPI)(nil).UploadBootFiles), ctx)
}

// DoAllBootFilesExist mocks base method
func (m *MockAPI) DoAllBootFilesExist(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAllBootFilesExist", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAllBootFilesExist indicates an expected call of DoAllBootFilesExist
func (mr *MockAPIMockRecorder) DoAllBootFilesExist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAllBootFilesExist", reflect.TypeOf((*MockAPI)(nil).DoAllBootFilesExist), ctx)
}

// DownloadBootFile mocks base method
func (m *MockAPI) DownloadBootFile(ctx context.Context, fileType string) (io.ReadCloser, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBootFile", ctx, fileType)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DownloadBootFile indicates an expected call of DownloadBootFile
func (mr *MockAPIMockRecorder) DownloadBootFile(ctx, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBootFile", reflect.TypeOf((*MockAPI)(nil).DownloadBootFile), ctx, fileType)
}

// GetS3BootFileURL mocks base method
func (m *MockAPI) GetS3BootFileURL(fileType string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3BootFileURL", fileType)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetS3BootFileURL indicates an expected call of GetS3BootFileURL
func (mr *MockAPIMockRecorder) GetS3BootFileURL(fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3BootFileURL", reflect.TypeOf((*MockAPI)(nil).GetS3BootFileURL), fileType)
}

// CreatePublicBucket mocks base method
func (m *MockAPI) CreatePublicBucket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicBucket")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePublicBucket indicates an expected call of CreatePublicBucket
func (mr *MockAPIMockRecorder) CreatePublicBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicBucket", reflect.TypeOf((*MockAPI)(nil).CreatePublicBucket))
}

// UploadStreamToPublicBucket mocks base method
func (m *MockAPI) UploadStreamToPublicBucket(ctx context.Context, reader io.Reader, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStreamToPublicBucket", ctx, reader, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadStreamToPublicBucket indicates an expected call of UploadStreamToPublicBucket
func (mr *MockAPIMockRecorder) UploadStreamToPublicBucket(ctx, reader, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStreamToPublicBucket", reflect.TypeOf((*MockAPI)(nil).UploadStreamToPublicBucket), ctx, reader, objectName)
}

// UploadFileToPublicBucket mocks base method
func (m *MockAPI) UploadFileToPublicBucket(ctx context.Context, filePath, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileToPublicBucket", ctx, filePath, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileToPublicBucket indicates an expected call of UploadFileToPublicBucket
func (mr *MockAPIMockRecorder) UploadFileToPublicBucket(ctx, filePath, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileToPublicBucket", reflect.TypeOf((*MockAPI)(nil).UploadFileToPublicBucket), ctx, filePath, objectName)
}

// DoesPublicObjectExist mocks base method
func (m *MockAPI) DoesPublicObjectExist(ctx context.Context, objectName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesPublicObjectExist", ctx, objectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesPublicObjectExist indicates an expected call of DoesPublicObjectExist
func (mr *MockAPIMockRecorder) DoesPublicObjectExist(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesPublicObjectExist", reflect.TypeOf((*MockAPI)(nil).DoesPublicObjectExist), ctx, objectName)
}
