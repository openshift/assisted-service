// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SourceState source state
//
// swagger:model source_state
type SourceState string

const (

	// SourceStateSynced captures enum value "synced"
	SourceStateSynced SourceState = "synced"

	// SourceStateCombined captures enum value "combined"
	SourceStateCombined SourceState = "combined"

	// SourceStateNotCombined captures enum value "not_combined"
	SourceStateNotCombined SourceState = "not_combined"

	// SourceStateError captures enum value "error"
	SourceStateError SourceState = "error"

	// SourceStateVariable captures enum value "variable"
	SourceStateVariable SourceState = "variable"

	// SourceStateUnreachable captures enum value "unreachable"
	SourceStateUnreachable SourceState = "unreachable"
)

// for schema
var sourceStateEnum []interface{}

func init() {
	var res []SourceState
	if err := json.Unmarshal([]byte(`["synced","combined","not_combined","error","variable","unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceStateEnum = append(sourceStateEnum, v)
	}
}

func (m SourceState) validateSourceStateEnum(path, location string, value SourceState) error {
	if err := validate.EnumCase(path, location, value, sourceStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this source state
func (m SourceState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSourceStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
