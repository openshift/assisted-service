// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RoleInfo role info
//
// swagger:model role-info
type RoleInfo string

const (

	// RoleInfoUserAssigned captures enum value "user-assigned"
	RoleInfoUserAssigned RoleInfo = "user-assigned"

	// RoleInfoDay2 captures enum value "day2"
	RoleInfoDay2 RoleInfo = "day2"

	// RoleInfoMinimalMasterCount captures enum value "minimal-master-count"
	RoleInfoMinimalMasterCount RoleInfo = "minimal-master-count"

	// RoleInfoHwRequirements captures enum value "hw-requirements"
	RoleInfoHwRequirements RoleInfo = "hw-requirements"

	// RoleInfoOther captures enum value "other"
	RoleInfoOther RoleInfo = "other"
)

// for schema
var roleInfoEnum []interface{}

func init() {
	var res []RoleInfo
	if err := json.Unmarshal([]byte(`["user-assigned","day2","minimal-master-count","hw-requirements","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleInfoEnum = append(roleInfoEnum, v)
	}
}

func (m RoleInfo) validateRoleInfoEnum(path, location string, value RoleInfo) error {
	if err := validate.EnumCase(path, location, value, roleInfoEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this role info
func (m RoleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRoleInfoEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
