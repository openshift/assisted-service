// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VlanConfig vlan config
//
// swagger:model vlan-config
type VlanConfig struct {

	// vlan id
	ID int64 `json:"id,omitempty"`

	// ipv4 config
	IPV4Config *StaticIPV4Config `json:"ipv4_config,omitempty"`

	// ipv6 config
	IPV6Config *StaticIPV6Config `json:"ipv6_config,omitempty"`

	// mac
	// Pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
	Mac string `json:"mac,omitempty"`
}

// Validate validates this vlan config
func (m *VlanConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV4Config(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6Config(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanConfig) validateIPV4Config(formats strfmt.Registry) error {

	if swag.IsZero(m.IPV4Config) { // not required
		return nil
	}

	if m.IPV4Config != nil {
		if err := m.IPV4Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4_config")
			}
			return err
		}
	}

	return nil
}

func (m *VlanConfig) validateIPV6Config(formats strfmt.Registry) error {

	if swag.IsZero(m.IPV6Config) { // not required
		return nil
	}

	if m.IPV6Config != nil {
		if err := m.IPV6Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6_config")
			}
			return err
		}
	}

	return nil
}

func (m *VlanConfig) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", string(m.Mac), `^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VlanConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlanConfig) UnmarshalBinary(b []byte) error {
	var res VlanConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
