// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Network network
//
// swagger:model network
type Network struct {

	// The IP block address pool.
	Cidr Subnet `json:"cidr,omitempty"`

	// The cluster that this network is associated with.
	// Format: uuid
	ClusterID strfmt.UUID `json:"cluster_id,omitempty" gorm:"primary_key;foreignkey:Cluster"`

	// kind
	// Enum: [ClusterNetwork ServiceNetwork MachineNetwork]
	Kind string `json:"kind,omitempty"`

	// The prefix size to allocate to each instance from the CIDR. For example, 24 would allocate 2^8=256 adresses to each instance.
	// Maximum: 128
	// Minimum: 1
	Prefix int64 `json:"prefix,omitempty"`
}

// Validate validates this network
func (m *Network) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Network) validateCidr(formats strfmt.Registry) error {

	if swag.IsZero(m.Cidr) { // not required
		return nil
	}

	if err := m.Cidr.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cidr")
		}
		return err
	}

	return nil
}

func (m *Network) validateClusterID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.FormatOf("cluster_id", "body", "uuid", m.ClusterID.String(), formats); err != nil {
		return err
	}

	return nil
}

var networkTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ClusterNetwork","ServiceNetwork","MachineNetwork"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkTypeKindPropEnum = append(networkTypeKindPropEnum, v)
	}
}

const (

	// NetworkKindClusterNetwork captures enum value "ClusterNetwork"
	NetworkKindClusterNetwork string = "ClusterNetwork"

	// NetworkKindServiceNetwork captures enum value "ServiceNetwork"
	NetworkKindServiceNetwork string = "ServiceNetwork"

	// NetworkKindMachineNetwork captures enum value "MachineNetwork"
	NetworkKindMachineNetwork string = "MachineNetwork"
)

// prop value enum
func (m *Network) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Network) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Network) validatePrefix(formats strfmt.Registry) error {

	if swag.IsZero(m.Prefix) { // not required
		return nil
	}

	if err := validate.MinimumInt("prefix", "body", int64(m.Prefix), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("prefix", "body", int64(m.Prefix), 128, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Network) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Network) UnmarshalBinary(b []byte) error {
	var res Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
