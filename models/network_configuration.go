// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkConfiguration network configuration
//
// swagger:model network_configuration
type NetworkConfiguration struct {

	// cluster network
	ClusterNetwork []*ClusterNetwork `json:"cluster_network"`

	// machine network
	MachineNetwork []*MachineNetwork `json:"machine_network"`

	// service network
	ServiceNetwork []*ServiceNetwork `json:"service_network"`
}

// Validate validates this network configuration
func (m *NetworkConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfiguration) validateClusterNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterNetwork) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterNetwork); i++ {
		if swag.IsZero(m.ClusterNetwork[i]) { // not required
			continue
		}

		if m.ClusterNetwork[i] != nil {
			if err := m.ClusterNetwork[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_network" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkConfiguration) validateMachineNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineNetwork) { // not required
		return nil
	}

	for i := 0; i < len(m.MachineNetwork); i++ {
		if swag.IsZero(m.MachineNetwork[i]) { // not required
			continue
		}

		if m.MachineNetwork[i] != nil {
			if err := m.MachineNetwork[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("machine_network" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkConfiguration) validateServiceNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceNetwork) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceNetwork); i++ {
		if swag.IsZero(m.ServiceNetwork[i]) { // not required
			continue
		}

		if m.ServiceNetwork[i] != nil {
			if err := m.ServiceNetwork[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("service_network" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfiguration) UnmarshalBinary(b []byte) error {
	var res NetworkConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
