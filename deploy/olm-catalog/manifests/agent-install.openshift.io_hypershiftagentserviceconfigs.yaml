apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: hypershiftagentserviceconfigs.agent-install.openshift.io
spec:
  group: agent-install.openshift.io
  names:
    kind: HypershiftAgentServiceConfig
    listKind: HypershiftAgentServiceConfigList
    plural: hypershiftagentserviceconfigs
    shortNames:
    - hasc
    singular: hypershiftagentserviceconfig
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: HypershiftAgentServiceConfig represents an Assisted Service deployment
          over zero-worker hypershift cluster. Each resource represents a deployment
          scheme over hosted cluster that runs in that namespace.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HypershiftAgentServiceConfigSpec defines the desired state
              of HypershiftAgentServiceConfig.
            properties:
              OSImageAdditionalParamsRef:
                description: OSImageAdditionalParamsRef is a reference to a secret
                  containing a headers and query parameters to be used during OS image
                  fetch.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              OSImageCACertRef:
                description: OSImageCACertRef is a reference to a config map containing
                  a certificate authority certificate this is an optional certificate
                  to allow a user to add a certificate authority for a HTTPS source
                  of images this certificate will be used by the assisted-image-service
                  when pulling OS images.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              databaseStorage:
                description: DatabaseStorage defines the spec of the PersistentVolumeClaim
                  to be created for the database's filesystem. With respect to the
                  resource requests, minimum 10GiB is recommended.
                properties:
                  accessModes:
                    description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  dataSourceRef:
                    description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef   allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef   preserves all values, and generates an error
                      if a disallowed value is   specified. * While dataSource only
                      allows local objects, dataSourceRef allows objects   in any
                      namespaces. (Beta) Using this field requires the AnyVolumeDataSource
                      feature gate to be enabled. (Alpha) Using the namespace field
                      of dataSourceRef requires the CrossNamespaceVolumeDataSource
                      feature gate to be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                      namespace:
                        description: Namespace is the namespace of resource being
                          referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                          object is required in the referent namespace to allow that
                          namespace's owner to accept the reference. See the ReferenceGrant
                          documentation for details. (Alpha) This field requires the
                          CrossNamespaceVolumeDataSource feature gate to be enabled.
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: selector is a label query over volumes to consider
                      for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  storageClassName:
                    description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeAttributesClassName:
                    description: 'volumeAttributesClassName may be used to set the
                      VolumeAttributesClass used by this claim. If specified, the
                      CSI driver will create or update the volume with the attributes
                      defined in the corresponding VolumeAttributesClass. This has
                      a different purpose than storageClassName, it can be changed
                      after the claim is created. An empty string value means that
                      no VolumeAttributesClass will be applied to the claim but it''s
                      not allowed to reset this field to empty string once it is set.
                      If unspecified and the PersistentVolumeClaim is unbound, the
                      default VolumeAttributesClass will be set by the persistentvolume
                      controller if it exists. If the resource referred to by volumeAttributesClass
                      does not exist, this PersistentVolumeClaim will be set to a
                      Pending state, as reflected by the modifyVolumeStatus field,
                      until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                      (Alpha) Using this field requires the VolumeAttributesClass
                      feature gate to be enabled.'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required
                      by the claim. Value of Filesystem is implied when not included
                      in claim spec.
                    type: string
                  volumeName:
                    description: volumeName is the binding reference to the PersistentVolume
                      backing this claim.
                    type: string
                type: object
              filesystemStorage:
                description: FileSystemStorage defines the spec of the PersistentVolumeClaim
                  to be created for the assisted-service's filesystem (logs, etc).
                  With respect to the resource requests, the amount of filesystem
                  storage consumed will depend largely on the number of clusters created
                  (~200MB per cluster and ~2-3GiB per supported OpenShift version).
                  Minimum 100GiB recommended.
                properties:
                  accessModes:
                    description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  dataSourceRef:
                    description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef   allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef   preserves all values, and generates an error
                      if a disallowed value is   specified. * While dataSource only
                      allows local objects, dataSourceRef allows objects   in any
                      namespaces. (Beta) Using this field requires the AnyVolumeDataSource
                      feature gate to be enabled. (Alpha) Using the namespace field
                      of dataSourceRef requires the CrossNamespaceVolumeDataSource
                      feature gate to be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                      namespace:
                        description: Namespace is the namespace of resource being
                          referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                          object is required in the referent namespace to allow that
                          namespace's owner to accept the reference. See the ReferenceGrant
                          documentation for details. (Alpha) This field requires the
                          CrossNamespaceVolumeDataSource feature gate to be enabled.
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: selector is a label query over volumes to consider
                      for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  storageClassName:
                    description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeAttributesClassName:
                    description: 'volumeAttributesClassName may be used to set the
                      VolumeAttributesClass used by this claim. If specified, the
                      CSI driver will create or update the volume with the attributes
                      defined in the corresponding VolumeAttributesClass. This has
                      a different purpose than storageClassName, it can be changed
                      after the claim is created. An empty string value means that
                      no VolumeAttributesClass will be applied to the claim but it''s
                      not allowed to reset this field to empty string once it is set.
                      If unspecified and the PersistentVolumeClaim is unbound, the
                      default VolumeAttributesClass will be set by the persistentvolume
                      controller if it exists. If the resource referred to by volumeAttributesClass
                      does not exist, this PersistentVolumeClaim will be set to a
                      Pending state, as reflected by the modifyVolumeStatus field,
                      until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                      (Alpha) Using this field requires the VolumeAttributesClass
                      feature gate to be enabled.'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required
                      by the claim. Value of Filesystem is implied when not included
                      in claim spec.
                    type: string
                  volumeName:
                    description: volumeName is the binding reference to the PersistentVolume
                      backing this claim.
                    type: string
                type: object
              iPXEHTTPRoute:
                description: 'IPXEHTTPRoute is controlling whether the operator is
                  creating plain HTTP routes iPXE hosts may not work with router cyphers
                  and may access artifacts via HTTP only This setting accepts "enabled,disabled",
                  defaults to disabled. Empty value defaults to disabled The following
                  endpoints would be exposed via http: * api/assisted-installer/v2/infra-envs/<id>/downloads/files?file_name=ipxe-script
                  in assisted-service * boot-artifacts/ and images/<infra-enf id>/pxe-initrd
                  in -image-service'
                enum:
                - enabled
                - disabled
                type: string
              imageStorage:
                description: ImageStorage defines the spec of the PersistentVolumeClaim
                  to be created for each replica of the image service. If a PersistentVolumeClaim
                  is provided 2GiB per OSImage entry is required
                properties:
                  accessModes:
                    description: 'accessModes contains the desired access modes the
                      volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                    items:
                      type: string
                    type: array
                  dataSource:
                    description: 'dataSource field can be used to specify either:
                      * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                      * An existing PVC (PersistentVolumeClaim) If the provisioner
                      or an external controller can support the specified data source,
                      it will create a new volume based on the contents of the specified
                      data source. When the AnyVolumeDataSource feature gate is enabled,
                      dataSource contents will be copied to dataSourceRef, and dataSourceRef
                      contents will be copied to dataSource when dataSourceRef.namespace
                      is not specified. If the namespace is specified, then dataSourceRef
                      will not be copied to dataSource.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  dataSourceRef:
                    description: 'dataSourceRef specifies the object from which to
                      populate the volume with data, if a non-empty volume is desired.
                      This may be any object from a non-empty API group (non core
                      object) or a PersistentVolumeClaim object. When this field is
                      specified, volume binding will only succeed if the type of the
                      specified object matches some installed volume populator or
                      dynamic provisioner. This field will replace the functionality
                      of the dataSource field and as such if both fields are non-empty,
                      they must have the same value. For backwards compatibility,
                      when namespace isn''t specified in dataSourceRef, both fields
                      (dataSource and dataSourceRef) will be set to the same value
                      automatically if one of them is empty and the other is non-empty.
                      When namespace is specified in dataSourceRef, dataSource isn''t
                      set to the same value and must be empty. There are three important
                      differences between dataSource and dataSourceRef: * While dataSource
                      only allows two specific types of objects, dataSourceRef   allows
                      any non-core object, as well as PersistentVolumeClaim objects.
                      * While dataSource ignores disallowed values (dropping them),
                      dataSourceRef   preserves all values, and generates an error
                      if a disallowed value is   specified. * While dataSource only
                      allows local objects, dataSourceRef allows objects   in any
                      namespaces. (Beta) Using this field requires the AnyVolumeDataSource
                      feature gate to be enabled. (Alpha) Using the namespace field
                      of dataSourceRef requires the CrossNamespaceVolumeDataSource
                      feature gate to be enabled.'
                    properties:
                      apiGroup:
                        description: APIGroup is the group for the resource being
                          referenced. If APIGroup is not specified, the specified
                          Kind must be in the core API group. For any other third-party
                          types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced
                        type: string
                      name:
                        description: Name is the name of resource being referenced
                        type: string
                      namespace:
                        description: Namespace is the namespace of resource being
                          referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                          object is required in the referent namespace to allow that
                          namespace's owner to accept the reference. See the ReferenceGrant
                          documentation for details. (Alpha) This field requires the
                          CrossNamespaceVolumeDataSource feature gate to be enabled.
                        type: string
                    required:
                    - kind
                    - name
                    type: object
                  resources:
                    description: 'resources represents the minimum resources the volume
                      should have. If RecoverVolumeExpansionFailure feature is enabled
                      users are allowed to specify resource requirements that are
                      lower than previous value but must still be higher than capacity
                      recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                    properties:
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  selector:
                    description: selector is a label query over volumes to consider
                      for binding.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  storageClassName:
                    description: 'storageClassName is the name of the StorageClass
                      required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                    type: string
                  volumeAttributesClassName:
                    description: 'volumeAttributesClassName may be used to set the
                      VolumeAttributesClass used by this claim. If specified, the
                      CSI driver will create or update the volume with the attributes
                      defined in the corresponding VolumeAttributesClass. This has
                      a different purpose than storageClassName, it can be changed
                      after the claim is created. An empty string value means that
                      no VolumeAttributesClass will be applied to the claim but it''s
                      not allowed to reset this field to empty string once it is set.
                      If unspecified and the PersistentVolumeClaim is unbound, the
                      default VolumeAttributesClass will be set by the persistentvolume
                      controller if it exists. If the resource referred to by volumeAttributesClass
                      does not exist, this PersistentVolumeClaim will be set to a
                      Pending state, as reflected by the modifyVolumeStatus field,
                      until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                      (Alpha) Using this field requires the VolumeAttributesClass
                      feature gate to be enabled.'
                    type: string
                  volumeMode:
                    description: volumeMode defines what type of volume is required
                      by the claim. Value of Filesystem is implied when not included
                      in claim spec.
                    type: string
                  volumeName:
                    description: volumeName is the binding reference to the PersistentVolume
                      backing this claim.
                    type: string
                type: object
              ingress:
                description: Ingress contains configuration for the ingress resources.
                  Has no effect when running on an OpenShift cluster.
                properties:
                  assistedServiceHostname:
                    description: AssistedServiceHostname is the hostname to be assigned
                      to the assisted-service ingress. Has no effect when running
                      on an OpenShift cluster.
                    type: string
                  className:
                    description: ClassName is the name of the ingress class to be
                      used when configuring ingress resources. Has no effect when
                      running on an OpenShift cluster.
                    type: string
                  imageServiceHostname:
                    description: ImageServiceHostname is the hostname to be assigned
                      to the assisted-image-service ingress. Has no effect when running
                      on an OpenShift cluster.
                    type: string
                required:
                - assistedServiceHostname
                - imageServiceHostname
                type: object
              kubeconfigSecretRef:
                description: KubeconfigSecretRef is a reference to the secret containing
                  the kubeconfig for the destination Hypershift instance.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              mirrorRegistryRef:
                description: 'MirrorRegistryRef is the reference to the configmap
                  that contains mirror registry configuration In case no configuration
                  is need, this field will be nil. ConfigMap must contain to entries:
                  ca-bundle.crt - hold the contents of mirror registry certificate/s
                  registries.conf - holds the content of registries.conf file configured
                  with mirror registries'
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              mustGatherImages:
                description: MustGatherImages defines a collection of operator related
                  must-gather images that are used if one the operators fails to be
                  successfully deployed
                items:
                  properties:
                    name:
                      description: Name specifies the name of the component (e.g.
                        operator) that the image is used to collect information about.
                      type: string
                    openshiftVersion:
                      description: OpenshiftVersion is the Major.Minor version of
                        OpenShift that this image is to be associated with.
                      type: string
                    url:
                      description: Url specifies the path to the Operating System
                        image.
                      type: string
                  required:
                  - name
                  - openshiftVersion
                  - url
                  type: object
                type: array
              osImages:
                description: OSImages defines a collection of Operating System images
                  (ie. RHCOS images) that the assisted-service should use as the base
                  when generating discovery ISOs.
                items:
                  description: OSImage defines an Operating System image and the OpenShift
                    version it is associated with.
                  properties:
                    cpuArchitecture:
                      description: The CPU architecture of the image (x86_64/arm64/etc).
                      type: string
                    openshiftVersion:
                      description: OpenshiftVersion is the Major.Minor version of
                        OpenShift that this image is to be associated with.
                      type: string
                    rootFSUrl:
                      description: 'rootFSUrl specifies the path to the root filesystem.
                        Deprecated: this field is ignored (will be removed in a future
                        release).'
                      type: string
                    url:
                      description: Url specifies the path to the Operating System
                        image.
                      type: string
                    version:
                      description: Version is the Operating System version of the
                        image.
                      type: string
                  required:
                  - openshiftVersion
                  - url
                  - version
                  type: object
                type: array
              unauthenticatedRegistries:
                description: UnauthenticatedRegistries is a list of registries from
                  which container images can be pulled without authentication. They
                  will be appended to the default list (quay.io, registry.ci.openshift.org).
                  Any registry on this list will not require credentials to be in
                  the pull secret validated by the assisted-service.
                items:
                  type: string
                type: array
            required:
            - databaseStorage
            - filesystemStorage
            - kubeconfigSecretRef
            type: object
          status:
            properties:
              conditions:
                items:
                  description: Condition represents the state of the operator's reconciliation
                    functionality.
                  properties:
                    lastHeartbeatTime:
                      format: date-time
                      type: string
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      description: ConditionType is the state of the operator's reconciliation
                        functionality.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
