// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	v1 "github.com/openshift/assisted-service/models/v1"
)

// GetClusterHostRequirementsOKCode is the HTTP code returned for type GetClusterHostRequirementsOK
const GetClusterHostRequirementsOKCode int = 200

/*GetClusterHostRequirementsOK Success.

swagger:response getClusterHostRequirementsOK
*/
type GetClusterHostRequirementsOK struct {

	/*
	  In: Body
	*/
	Payload v1.ClusterHostRequirementsList `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsOK creates GetClusterHostRequirementsOK with default headers values
func NewGetClusterHostRequirementsOK() *GetClusterHostRequirementsOK {

	return &GetClusterHostRequirementsOK{}
}

// WithPayload adds the payload to the get cluster host requirements o k response
func (o *GetClusterHostRequirementsOK) WithPayload(payload v1.ClusterHostRequirementsList) *GetClusterHostRequirementsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements o k response
func (o *GetClusterHostRequirementsOK) SetPayload(payload v1.ClusterHostRequirementsList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = v1.ClusterHostRequirementsList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetClusterHostRequirementsUnauthorizedCode is the HTTP code returned for type GetClusterHostRequirementsUnauthorized
const GetClusterHostRequirementsUnauthorizedCode int = 401

/*GetClusterHostRequirementsUnauthorized Unauthorized.

swagger:response getClusterHostRequirementsUnauthorized
*/
type GetClusterHostRequirementsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.InfraError `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsUnauthorized creates GetClusterHostRequirementsUnauthorized with default headers values
func NewGetClusterHostRequirementsUnauthorized() *GetClusterHostRequirementsUnauthorized {

	return &GetClusterHostRequirementsUnauthorized{}
}

// WithPayload adds the payload to the get cluster host requirements unauthorized response
func (o *GetClusterHostRequirementsUnauthorized) WithPayload(payload *v1.InfraError) *GetClusterHostRequirementsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements unauthorized response
func (o *GetClusterHostRequirementsUnauthorized) SetPayload(payload *v1.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterHostRequirementsForbiddenCode is the HTTP code returned for type GetClusterHostRequirementsForbidden
const GetClusterHostRequirementsForbiddenCode int = 403

/*GetClusterHostRequirementsForbidden Forbidden.

swagger:response getClusterHostRequirementsForbidden
*/
type GetClusterHostRequirementsForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.InfraError `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsForbidden creates GetClusterHostRequirementsForbidden with default headers values
func NewGetClusterHostRequirementsForbidden() *GetClusterHostRequirementsForbidden {

	return &GetClusterHostRequirementsForbidden{}
}

// WithPayload adds the payload to the get cluster host requirements forbidden response
func (o *GetClusterHostRequirementsForbidden) WithPayload(payload *v1.InfraError) *GetClusterHostRequirementsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements forbidden response
func (o *GetClusterHostRequirementsForbidden) SetPayload(payload *v1.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterHostRequirementsNotFoundCode is the HTTP code returned for type GetClusterHostRequirementsNotFound
const GetClusterHostRequirementsNotFoundCode int = 404

/*GetClusterHostRequirementsNotFound Error.

swagger:response getClusterHostRequirementsNotFound
*/
type GetClusterHostRequirementsNotFound struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsNotFound creates GetClusterHostRequirementsNotFound with default headers values
func NewGetClusterHostRequirementsNotFound() *GetClusterHostRequirementsNotFound {

	return &GetClusterHostRequirementsNotFound{}
}

// WithPayload adds the payload to the get cluster host requirements not found response
func (o *GetClusterHostRequirementsNotFound) WithPayload(payload *v1.Error) *GetClusterHostRequirementsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements not found response
func (o *GetClusterHostRequirementsNotFound) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterHostRequirementsMethodNotAllowedCode is the HTTP code returned for type GetClusterHostRequirementsMethodNotAllowed
const GetClusterHostRequirementsMethodNotAllowedCode int = 405

/*GetClusterHostRequirementsMethodNotAllowed Method Not Allowed.

swagger:response getClusterHostRequirementsMethodNotAllowed
*/
type GetClusterHostRequirementsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsMethodNotAllowed creates GetClusterHostRequirementsMethodNotAllowed with default headers values
func NewGetClusterHostRequirementsMethodNotAllowed() *GetClusterHostRequirementsMethodNotAllowed {

	return &GetClusterHostRequirementsMethodNotAllowed{}
}

// WithPayload adds the payload to the get cluster host requirements method not allowed response
func (o *GetClusterHostRequirementsMethodNotAllowed) WithPayload(payload *v1.Error) *GetClusterHostRequirementsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements method not allowed response
func (o *GetClusterHostRequirementsMethodNotAllowed) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterHostRequirementsInternalServerErrorCode is the HTTP code returned for type GetClusterHostRequirementsInternalServerError
const GetClusterHostRequirementsInternalServerErrorCode int = 500

/*GetClusterHostRequirementsInternalServerError Error.

swagger:response getClusterHostRequirementsInternalServerError
*/
type GetClusterHostRequirementsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetClusterHostRequirementsInternalServerError creates GetClusterHostRequirementsInternalServerError with default headers values
func NewGetClusterHostRequirementsInternalServerError() *GetClusterHostRequirementsInternalServerError {

	return &GetClusterHostRequirementsInternalServerError{}
}

// WithPayload adds the payload to the get cluster host requirements internal server error response
func (o *GetClusterHostRequirementsInternalServerError) WithPayload(payload *v1.Error) *GetClusterHostRequirementsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster host requirements internal server error response
func (o *GetClusterHostRequirementsInternalServerError) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterHostRequirementsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
