// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// V2DownloadHostIgnitionHandlerFunc turns a function with the right signature into a v2 download host ignition handler
type V2DownloadHostIgnitionHandlerFunc func(V2DownloadHostIgnitionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn V2DownloadHostIgnitionHandlerFunc) Handle(params V2DownloadHostIgnitionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// V2DownloadHostIgnitionHandler interface for that can handle valid v2 download host ignition params
type V2DownloadHostIgnitionHandler interface {
	Handle(V2DownloadHostIgnitionParams, interface{}) middleware.Responder
}

// NewV2DownloadHostIgnition creates a new http.Handler for the v2 download host ignition operation
func NewV2DownloadHostIgnition(ctx *middleware.Context, handler V2DownloadHostIgnitionHandler) *V2DownloadHostIgnition {
	return &V2DownloadHostIgnition{Context: ctx, Handler: handler}
}

/*V2DownloadHostIgnition swagger:route GET /v2/infra-env/{infra_env_id}/hosts/{host_id}/downloads/ignition installer v2DownloadHostIgnition

Downloads the customized ignition file for this bound host, produces octet stream. For unbound host - error is returned

*/
type V2DownloadHostIgnition struct {
	Context *middleware.Context
	Handler V2DownloadHostIgnitionHandler
}

func (o *V2DownloadHostIgnition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV2DownloadHostIgnitionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
