// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// RegisterDay2ClusterCreatedCode is the HTTP code returned for type RegisterDay2ClusterCreated
const RegisterDay2ClusterCreatedCode int = 201

/*RegisterDay2ClusterCreated Success.

swagger:response registerDay2ClusterCreated
*/
type RegisterDay2ClusterCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewRegisterDay2ClusterCreated creates RegisterDay2ClusterCreated with default headers values
func NewRegisterDay2ClusterCreated() *RegisterDay2ClusterCreated {

	return &RegisterDay2ClusterCreated{}
}

// WithPayload adds the payload to the register day2 cluster created response
func (o *RegisterDay2ClusterCreated) WithPayload(payload *models.Cluster) *RegisterDay2ClusterCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register day2 cluster created response
func (o *RegisterDay2ClusterCreated) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterDay2ClusterCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterDay2ClusterBadRequestCode is the HTTP code returned for type RegisterDay2ClusterBadRequest
const RegisterDay2ClusterBadRequestCode int = 400

/*RegisterDay2ClusterBadRequest Error.

swagger:response registerDay2ClusterBadRequest
*/
type RegisterDay2ClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterDay2ClusterBadRequest creates RegisterDay2ClusterBadRequest with default headers values
func NewRegisterDay2ClusterBadRequest() *RegisterDay2ClusterBadRequest {

	return &RegisterDay2ClusterBadRequest{}
}

// WithPayload adds the payload to the register day2 cluster bad request response
func (o *RegisterDay2ClusterBadRequest) WithPayload(payload *models.Error) *RegisterDay2ClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register day2 cluster bad request response
func (o *RegisterDay2ClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterDay2ClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterDay2ClusterInternalServerErrorCode is the HTTP code returned for type RegisterDay2ClusterInternalServerError
const RegisterDay2ClusterInternalServerErrorCode int = 500

/*RegisterDay2ClusterInternalServerError Error.

swagger:response registerDay2ClusterInternalServerError
*/
type RegisterDay2ClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterDay2ClusterInternalServerError creates RegisterDay2ClusterInternalServerError with default headers values
func NewRegisterDay2ClusterInternalServerError() *RegisterDay2ClusterInternalServerError {

	return &RegisterDay2ClusterInternalServerError{}
}

// WithPayload adds the payload to the register day2 cluster internal server error response
func (o *RegisterDay2ClusterInternalServerError) WithPayload(payload *models.Error) *RegisterDay2ClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register day2 cluster internal server error response
func (o *RegisterDay2ClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterDay2ClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
