// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// RegisterClusterCreatedCode is the HTTP code returned for type RegisterClusterCreated
const RegisterClusterCreatedCode int = 201

/*RegisterClusterCreated Success.

swagger:response registerClusterCreated
*/
type RegisterClusterCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewRegisterClusterCreated creates RegisterClusterCreated with default headers values
func NewRegisterClusterCreated() *RegisterClusterCreated {

	return &RegisterClusterCreated{}
}

// WithPayload adds the payload to the register cluster created response
func (o *RegisterClusterCreated) WithPayload(payload *models.Cluster) *RegisterClusterCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register cluster created response
func (o *RegisterClusterCreated) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterClusterCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterClusterBadRequestCode is the HTTP code returned for type RegisterClusterBadRequest
const RegisterClusterBadRequestCode int = 400

/*RegisterClusterBadRequest Error.

swagger:response registerClusterBadRequest
*/
type RegisterClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterClusterBadRequest creates RegisterClusterBadRequest with default headers values
func NewRegisterClusterBadRequest() *RegisterClusterBadRequest {

	return &RegisterClusterBadRequest{}
}

// WithPayload adds the payload to the register cluster bad request response
func (o *RegisterClusterBadRequest) WithPayload(payload *models.Error) *RegisterClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register cluster bad request response
func (o *RegisterClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterClusterInternalServerErrorCode is the HTTP code returned for type RegisterClusterInternalServerError
const RegisterClusterInternalServerErrorCode int = 500

/*RegisterClusterInternalServerError Error.

swagger:response registerClusterInternalServerError
*/
type RegisterClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterClusterInternalServerError creates RegisterClusterInternalServerError with default headers values
func NewRegisterClusterInternalServerError() *RegisterClusterInternalServerError {

	return &RegisterClusterInternalServerError{}
}

// WithPayload adds the payload to the register cluster internal server error response
func (o *RegisterClusterInternalServerError) WithPayload(payload *models.Error) *RegisterClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register cluster internal server error response
func (o *RegisterClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
