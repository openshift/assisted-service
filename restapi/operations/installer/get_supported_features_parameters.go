// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetSupportedFeaturesParams creates a new GetSupportedFeaturesParams object
// with the default values initialized.
func NewGetSupportedFeaturesParams() GetSupportedFeaturesParams {

	var (
		// initialize parameters with default values

		cPUArchitectureDefault = string("x86_64")
	)

	return GetSupportedFeaturesParams{
		CPUArchitecture: &cPUArchitectureDefault,
	}
}

// GetSupportedFeaturesParams contains all the bound params for the get supported features operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSupportedFeatures
type GetSupportedFeaturesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The CPU architecture of the image (x86_64/arm64/etc).
	  In: query
	  Default: "x86_64"
	*/
	CPUArchitecture *string
	/*External platform name when platform type is set to external. The value of this parameter will be ignored if platform_type is not external.
	  In: query
	*/
	ExternalPlatformName *string
	/*Version of the OpenShift cluster.
	  Required: true
	  In: query
	*/
	OpenshiftVersion string
	/*The provider platform type.
	  In: query
	*/
	PlatformType *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSupportedFeaturesParams() beforehand.
func (o *GetSupportedFeaturesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCPUArchitecture, qhkCPUArchitecture, _ := qs.GetOK("cpu_architecture")
	if err := o.bindCPUArchitecture(qCPUArchitecture, qhkCPUArchitecture, route.Formats); err != nil {
		res = append(res, err)
	}

	qExternalPlatformName, qhkExternalPlatformName, _ := qs.GetOK("external_platform_name")
	if err := o.bindExternalPlatformName(qExternalPlatformName, qhkExternalPlatformName, route.Formats); err != nil {
		res = append(res, err)
	}

	qOpenshiftVersion, qhkOpenshiftVersion, _ := qs.GetOK("openshift_version")
	if err := o.bindOpenshiftVersion(qOpenshiftVersion, qhkOpenshiftVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qPlatformType, qhkPlatformType, _ := qs.GetOK("platform_type")
	if err := o.bindPlatformType(qPlatformType, qhkPlatformType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCPUArchitecture binds and validates parameter CPUArchitecture from query.
func (o *GetSupportedFeaturesParams) bindCPUArchitecture(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetSupportedFeaturesParams()
		return nil
	}
	o.CPUArchitecture = &raw

	if err := o.validateCPUArchitecture(formats); err != nil {
		return err
	}

	return nil
}

// validateCPUArchitecture carries on validations for parameter CPUArchitecture
func (o *GetSupportedFeaturesParams) validateCPUArchitecture(formats strfmt.Registry) error {

	if err := validate.EnumCase("cpu_architecture", "query", *o.CPUArchitecture, []interface{}{"x86_64", "aarch64", "arm64", "ppc64le", "s390x", "multi"}, true); err != nil {
		return err
	}

	return nil
}

// bindExternalPlatformName binds and validates parameter ExternalPlatformName from query.
func (o *GetSupportedFeaturesParams) bindExternalPlatformName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ExternalPlatformName = &raw

	return nil
}

// bindOpenshiftVersion binds and validates parameter OpenshiftVersion from query.
func (o *GetSupportedFeaturesParams) bindOpenshiftVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("openshift_version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("openshift_version", "query", raw); err != nil {
		return err
	}
	o.OpenshiftVersion = raw

	return nil
}

// bindPlatformType binds and validates parameter PlatformType from query.
func (o *GetSupportedFeaturesParams) bindPlatformType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PlatformType = &raw

	if err := o.validatePlatformType(formats); err != nil {
		return err
	}

	return nil
}

// validatePlatformType carries on validations for parameter PlatformType
func (o *GetSupportedFeaturesParams) validatePlatformType(formats strfmt.Registry) error {

	if err := validate.EnumCase("platform_type", "query", *o.PlatformType, []interface{}{"baremetal", "none", "nutanix", "vsphere", "external"}, true); err != nil {
		return err
	}

	return nil
}
