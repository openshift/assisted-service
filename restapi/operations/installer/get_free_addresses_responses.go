// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// GetFreeAddressesOKCode is the HTTP code returned for type GetFreeAddressesOK
const GetFreeAddressesOKCode int = 200

/*GetFreeAddressesOK Success

swagger:response getFreeAddressesOK
*/
type GetFreeAddressesOK struct {

	/*
	  In: Body
	*/
	Payload models.FreeAddressesList `json:"body,omitempty"`
}

// NewGetFreeAddressesOK creates GetFreeAddressesOK with default headers values
func NewGetFreeAddressesOK() *GetFreeAddressesOK {

	return &GetFreeAddressesOK{}
}

// WithPayload adds the payload to the get free addresses o k response
func (o *GetFreeAddressesOK) WithPayload(payload models.FreeAddressesList) *GetFreeAddressesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get free addresses o k response
func (o *GetFreeAddressesOK) SetPayload(payload models.FreeAddressesList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFreeAddressesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.FreeAddressesList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFreeAddressesNotFoundCode is the HTTP code returned for type GetFreeAddressesNotFound
const GetFreeAddressesNotFoundCode int = 404

/*GetFreeAddressesNotFound Error.

swagger:response getFreeAddressesNotFound
*/
type GetFreeAddressesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFreeAddressesNotFound creates GetFreeAddressesNotFound with default headers values
func NewGetFreeAddressesNotFound() *GetFreeAddressesNotFound {

	return &GetFreeAddressesNotFound{}
}

// WithPayload adds the payload to the get free addresses not found response
func (o *GetFreeAddressesNotFound) WithPayload(payload *models.Error) *GetFreeAddressesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get free addresses not found response
func (o *GetFreeAddressesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFreeAddressesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFreeAddressesInternalServerErrorCode is the HTTP code returned for type GetFreeAddressesInternalServerError
const GetFreeAddressesInternalServerErrorCode int = 500

/*GetFreeAddressesInternalServerError Error.

swagger:response getFreeAddressesInternalServerError
*/
type GetFreeAddressesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetFreeAddressesInternalServerError creates GetFreeAddressesInternalServerError with default headers values
func NewGetFreeAddressesInternalServerError() *GetFreeAddressesInternalServerError {

	return &GetFreeAddressesInternalServerError{}
}

// WithPayload adds the payload to the get free addresses internal server error response
func (o *GetFreeAddressesInternalServerError) WithPayload(payload *models.Error) *GetFreeAddressesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get free addresses internal server error response
func (o *GetFreeAddressesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFreeAddressesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
