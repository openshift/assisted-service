// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// GetSupportedFeaturesOKCode is the HTTP code returned for type GetSupportedFeaturesOK
const GetSupportedFeaturesOKCode int = 200

/*
GetSupportedFeaturesOK Success.

swagger:response getSupportedFeaturesOK
*/
type GetSupportedFeaturesOK struct {

	/*
	  In: Body
	*/
	Payload *GetSupportedFeaturesOKBody `json:"body,omitempty"`
}

// NewGetSupportedFeaturesOK creates GetSupportedFeaturesOK with default headers values
func NewGetSupportedFeaturesOK() *GetSupportedFeaturesOK {

	return &GetSupportedFeaturesOK{}
}

// WithPayload adds the payload to the get supported features o k response
func (o *GetSupportedFeaturesOK) WithPayload(payload *GetSupportedFeaturesOKBody) *GetSupportedFeaturesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features o k response
func (o *GetSupportedFeaturesOK) SetPayload(payload *GetSupportedFeaturesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedFeaturesBadRequestCode is the HTTP code returned for type GetSupportedFeaturesBadRequest
const GetSupportedFeaturesBadRequestCode int = 400

/*
GetSupportedFeaturesBadRequest Error.

swagger:response getSupportedFeaturesBadRequest
*/
type GetSupportedFeaturesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSupportedFeaturesBadRequest creates GetSupportedFeaturesBadRequest with default headers values
func NewGetSupportedFeaturesBadRequest() *GetSupportedFeaturesBadRequest {

	return &GetSupportedFeaturesBadRequest{}
}

// WithPayload adds the payload to the get supported features bad request response
func (o *GetSupportedFeaturesBadRequest) WithPayload(payload *models.Error) *GetSupportedFeaturesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features bad request response
func (o *GetSupportedFeaturesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedFeaturesUnauthorizedCode is the HTTP code returned for type GetSupportedFeaturesUnauthorized
const GetSupportedFeaturesUnauthorizedCode int = 401

/*
GetSupportedFeaturesUnauthorized Unauthorized.

swagger:response getSupportedFeaturesUnauthorized
*/
type GetSupportedFeaturesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewGetSupportedFeaturesUnauthorized creates GetSupportedFeaturesUnauthorized with default headers values
func NewGetSupportedFeaturesUnauthorized() *GetSupportedFeaturesUnauthorized {

	return &GetSupportedFeaturesUnauthorized{}
}

// WithPayload adds the payload to the get supported features unauthorized response
func (o *GetSupportedFeaturesUnauthorized) WithPayload(payload *models.InfraError) *GetSupportedFeaturesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features unauthorized response
func (o *GetSupportedFeaturesUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedFeaturesForbiddenCode is the HTTP code returned for type GetSupportedFeaturesForbidden
const GetSupportedFeaturesForbiddenCode int = 403

/*
GetSupportedFeaturesForbidden Forbidden.

swagger:response getSupportedFeaturesForbidden
*/
type GetSupportedFeaturesForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewGetSupportedFeaturesForbidden creates GetSupportedFeaturesForbidden with default headers values
func NewGetSupportedFeaturesForbidden() *GetSupportedFeaturesForbidden {

	return &GetSupportedFeaturesForbidden{}
}

// WithPayload adds the payload to the get supported features forbidden response
func (o *GetSupportedFeaturesForbidden) WithPayload(payload *models.InfraError) *GetSupportedFeaturesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features forbidden response
func (o *GetSupportedFeaturesForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedFeaturesNotFoundCode is the HTTP code returned for type GetSupportedFeaturesNotFound
const GetSupportedFeaturesNotFoundCode int = 404

/*
GetSupportedFeaturesNotFound Error.

swagger:response getSupportedFeaturesNotFound
*/
type GetSupportedFeaturesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSupportedFeaturesNotFound creates GetSupportedFeaturesNotFound with default headers values
func NewGetSupportedFeaturesNotFound() *GetSupportedFeaturesNotFound {

	return &GetSupportedFeaturesNotFound{}
}

// WithPayload adds the payload to the get supported features not found response
func (o *GetSupportedFeaturesNotFound) WithPayload(payload *models.Error) *GetSupportedFeaturesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features not found response
func (o *GetSupportedFeaturesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSupportedFeaturesServiceUnavailableCode is the HTTP code returned for type GetSupportedFeaturesServiceUnavailable
const GetSupportedFeaturesServiceUnavailableCode int = 503

/*
GetSupportedFeaturesServiceUnavailable Unavailable.

swagger:response getSupportedFeaturesServiceUnavailable
*/
type GetSupportedFeaturesServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSupportedFeaturesServiceUnavailable creates GetSupportedFeaturesServiceUnavailable with default headers values
func NewGetSupportedFeaturesServiceUnavailable() *GetSupportedFeaturesServiceUnavailable {

	return &GetSupportedFeaturesServiceUnavailable{}
}

// WithPayload adds the payload to the get supported features service unavailable response
func (o *GetSupportedFeaturesServiceUnavailable) WithPayload(payload *models.Error) *GetSupportedFeaturesServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get supported features service unavailable response
func (o *GetSupportedFeaturesServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSupportedFeaturesServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
