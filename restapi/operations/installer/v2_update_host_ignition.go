// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// V2UpdateHostIgnitionHandlerFunc turns a function with the right signature into a v2 update host ignition handler
type V2UpdateHostIgnitionHandlerFunc func(V2UpdateHostIgnitionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn V2UpdateHostIgnitionHandlerFunc) Handle(params V2UpdateHostIgnitionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// V2UpdateHostIgnitionHandler interface for that can handle valid v2 update host ignition params
type V2UpdateHostIgnitionHandler interface {
	Handle(V2UpdateHostIgnitionParams, interface{}) middleware.Responder
}

// NewV2UpdateHostIgnition creates a new http.Handler for the v2 update host ignition operation
func NewV2UpdateHostIgnition(ctx *middleware.Context, handler V2UpdateHostIgnitionHandler) *V2UpdateHostIgnition {
	return &V2UpdateHostIgnition{Context: ctx, Handler: handler}
}

/*V2UpdateHostIgnition swagger:route PATCH /v2/infra-envs/{infra_env_id}/hosts/{host_id}/ignition installer v2UpdateHostIgnition

Patch the ignition file for this host

*/
type V2UpdateHostIgnition struct {
	Context *middleware.Context
	Handler V2UpdateHostIgnitionHandler
}

func (o *V2UpdateHostIgnition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewV2UpdateHostIgnitionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
