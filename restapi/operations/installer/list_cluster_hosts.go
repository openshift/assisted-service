// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListClusterHostsHandlerFunc turns a function with the right signature into a list cluster hosts handler
type ListClusterHostsHandlerFunc func(ListClusterHostsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListClusterHostsHandlerFunc) Handle(params ListClusterHostsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListClusterHostsHandler interface for that can handle valid list cluster hosts params
type ListClusterHostsHandler interface {
	Handle(ListClusterHostsParams, interface{}) middleware.Responder
}

// NewListClusterHosts creates a new http.Handler for the list cluster hosts operation
func NewListClusterHosts(ctx *middleware.Context, handler ListClusterHostsHandler) *ListClusterHosts {
	return &ListClusterHosts{Context: ctx, Handler: handler}
}

/* ListClusterHosts swagger:route GET /v2/clusters/{cluster_id}/hosts installer listClusterHosts

Get a list of cluster hosts according to supplied filters.

*/
type ListClusterHosts struct {
	Context *middleware.Context
	Handler ListClusterHostsHandler
}

func (o *ListClusterHosts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListClusterHostsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
