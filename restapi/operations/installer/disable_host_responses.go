// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// DisableHostOKCode is the HTTP code returned for type DisableHostOK
const DisableHostOKCode int = 200

/*DisableHostOK Success.

swagger:response disableHostOK
*/
type DisableHostOK struct {

	/*
	  In: Body
	*/
	Payload *models.Host `json:"body,omitempty"`
}

// NewDisableHostOK creates DisableHostOK with default headers values
func NewDisableHostOK() *DisableHostOK {

	return &DisableHostOK{}
}

// WithPayload adds the payload to the disable host o k response
func (o *DisableHostOK) WithPayload(payload *models.Host) *DisableHostOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host o k response
func (o *DisableHostOK) SetPayload(payload *models.Host) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostUnauthorizedCode is the HTTP code returned for type DisableHostUnauthorized
const DisableHostUnauthorizedCode int = 401

/*DisableHostUnauthorized Unauthorized.

swagger:response disableHostUnauthorized
*/
type DisableHostUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewDisableHostUnauthorized creates DisableHostUnauthorized with default headers values
func NewDisableHostUnauthorized() *DisableHostUnauthorized {

	return &DisableHostUnauthorized{}
}

// WithPayload adds the payload to the disable host unauthorized response
func (o *DisableHostUnauthorized) WithPayload(payload *models.InfraError) *DisableHostUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host unauthorized response
func (o *DisableHostUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostForbiddenCode is the HTTP code returned for type DisableHostForbidden
const DisableHostForbiddenCode int = 403

/*DisableHostForbidden Forbidden.

swagger:response disableHostForbidden
*/
type DisableHostForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewDisableHostForbidden creates DisableHostForbidden with default headers values
func NewDisableHostForbidden() *DisableHostForbidden {

	return &DisableHostForbidden{}
}

// WithPayload adds the payload to the disable host forbidden response
func (o *DisableHostForbidden) WithPayload(payload *models.InfraError) *DisableHostForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host forbidden response
func (o *DisableHostForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostNotFoundCode is the HTTP code returned for type DisableHostNotFound
const DisableHostNotFoundCode int = 404

/*DisableHostNotFound Error.

swagger:response disableHostNotFound
*/
type DisableHostNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDisableHostNotFound creates DisableHostNotFound with default headers values
func NewDisableHostNotFound() *DisableHostNotFound {

	return &DisableHostNotFound{}
}

// WithPayload adds the payload to the disable host not found response
func (o *DisableHostNotFound) WithPayload(payload *models.Error) *DisableHostNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host not found response
func (o *DisableHostNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostMethodNotAllowedCode is the HTTP code returned for type DisableHostMethodNotAllowed
const DisableHostMethodNotAllowedCode int = 405

/*DisableHostMethodNotAllowed Method Not Allowed.

swagger:response disableHostMethodNotAllowed
*/
type DisableHostMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDisableHostMethodNotAllowed creates DisableHostMethodNotAllowed with default headers values
func NewDisableHostMethodNotAllowed() *DisableHostMethodNotAllowed {

	return &DisableHostMethodNotAllowed{}
}

// WithPayload adds the payload to the disable host method not allowed response
func (o *DisableHostMethodNotAllowed) WithPayload(payload *models.Error) *DisableHostMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host method not allowed response
func (o *DisableHostMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostConflictCode is the HTTP code returned for type DisableHostConflict
const DisableHostConflictCode int = 409

/*DisableHostConflict Error.

swagger:response disableHostConflict
*/
type DisableHostConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDisableHostConflict creates DisableHostConflict with default headers values
func NewDisableHostConflict() *DisableHostConflict {

	return &DisableHostConflict{}
}

// WithPayload adds the payload to the disable host conflict response
func (o *DisableHostConflict) WithPayload(payload *models.Error) *DisableHostConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host conflict response
func (o *DisableHostConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableHostInternalServerErrorCode is the HTTP code returned for type DisableHostInternalServerError
const DisableHostInternalServerErrorCode int = 500

/*DisableHostInternalServerError Error.

swagger:response disableHostInternalServerError
*/
type DisableHostInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDisableHostInternalServerError creates DisableHostInternalServerError with default headers values
func NewDisableHostInternalServerError() *DisableHostInternalServerError {

	return &DisableHostInternalServerError{}
}

// WithPayload adds the payload to the disable host internal server error response
func (o *DisableHostInternalServerError) WithPayload(payload *models.Error) *DisableHostInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable host internal server error response
func (o *DisableHostInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableHostInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
