// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2UpdateClusterCreatedCode is the HTTP code returned for type V2UpdateClusterCreated
const V2UpdateClusterCreatedCode int = 201

/*V2UpdateClusterCreated Success.

swagger:response v2UpdateClusterCreated
*/
type V2UpdateClusterCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewV2UpdateClusterCreated creates V2UpdateClusterCreated with default headers values
func NewV2UpdateClusterCreated() *V2UpdateClusterCreated {

	return &V2UpdateClusterCreated{}
}

// WithPayload adds the payload to the v2 update cluster created response
func (o *V2UpdateClusterCreated) WithPayload(payload *models.Cluster) *V2UpdateClusterCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster created response
func (o *V2UpdateClusterCreated) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterBadRequestCode is the HTTP code returned for type V2UpdateClusterBadRequest
const V2UpdateClusterBadRequestCode int = 400

/*V2UpdateClusterBadRequest Error.

swagger:response v2UpdateClusterBadRequest
*/
type V2UpdateClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UpdateClusterBadRequest creates V2UpdateClusterBadRequest with default headers values
func NewV2UpdateClusterBadRequest() *V2UpdateClusterBadRequest {

	return &V2UpdateClusterBadRequest{}
}

// WithPayload adds the payload to the v2 update cluster bad request response
func (o *V2UpdateClusterBadRequest) WithPayload(payload *models.Error) *V2UpdateClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster bad request response
func (o *V2UpdateClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterUnauthorizedCode is the HTTP code returned for type V2UpdateClusterUnauthorized
const V2UpdateClusterUnauthorizedCode int = 401

/*V2UpdateClusterUnauthorized Unauthorized.

swagger:response v2UpdateClusterUnauthorized
*/
type V2UpdateClusterUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2UpdateClusterUnauthorized creates V2UpdateClusterUnauthorized with default headers values
func NewV2UpdateClusterUnauthorized() *V2UpdateClusterUnauthorized {

	return &V2UpdateClusterUnauthorized{}
}

// WithPayload adds the payload to the v2 update cluster unauthorized response
func (o *V2UpdateClusterUnauthorized) WithPayload(payload *models.InfraError) *V2UpdateClusterUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster unauthorized response
func (o *V2UpdateClusterUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterForbiddenCode is the HTTP code returned for type V2UpdateClusterForbidden
const V2UpdateClusterForbiddenCode int = 403

/*V2UpdateClusterForbidden Forbidden.

swagger:response v2UpdateClusterForbidden
*/
type V2UpdateClusterForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2UpdateClusterForbidden creates V2UpdateClusterForbidden with default headers values
func NewV2UpdateClusterForbidden() *V2UpdateClusterForbidden {

	return &V2UpdateClusterForbidden{}
}

// WithPayload adds the payload to the v2 update cluster forbidden response
func (o *V2UpdateClusterForbidden) WithPayload(payload *models.InfraError) *V2UpdateClusterForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster forbidden response
func (o *V2UpdateClusterForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterNotFoundCode is the HTTP code returned for type V2UpdateClusterNotFound
const V2UpdateClusterNotFoundCode int = 404

/*V2UpdateClusterNotFound Error.

swagger:response v2UpdateClusterNotFound
*/
type V2UpdateClusterNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UpdateClusterNotFound creates V2UpdateClusterNotFound with default headers values
func NewV2UpdateClusterNotFound() *V2UpdateClusterNotFound {

	return &V2UpdateClusterNotFound{}
}

// WithPayload adds the payload to the v2 update cluster not found response
func (o *V2UpdateClusterNotFound) WithPayload(payload *models.Error) *V2UpdateClusterNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster not found response
func (o *V2UpdateClusterNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterMethodNotAllowedCode is the HTTP code returned for type V2UpdateClusterMethodNotAllowed
const V2UpdateClusterMethodNotAllowedCode int = 405

/*V2UpdateClusterMethodNotAllowed Method Not Allowed.

swagger:response v2UpdateClusterMethodNotAllowed
*/
type V2UpdateClusterMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UpdateClusterMethodNotAllowed creates V2UpdateClusterMethodNotAllowed with default headers values
func NewV2UpdateClusterMethodNotAllowed() *V2UpdateClusterMethodNotAllowed {

	return &V2UpdateClusterMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 update cluster method not allowed response
func (o *V2UpdateClusterMethodNotAllowed) WithPayload(payload *models.Error) *V2UpdateClusterMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster method not allowed response
func (o *V2UpdateClusterMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterConflictCode is the HTTP code returned for type V2UpdateClusterConflict
const V2UpdateClusterConflictCode int = 409

/*V2UpdateClusterConflict Error.

swagger:response v2UpdateClusterConflict
*/
type V2UpdateClusterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UpdateClusterConflict creates V2UpdateClusterConflict with default headers values
func NewV2UpdateClusterConflict() *V2UpdateClusterConflict {

	return &V2UpdateClusterConflict{}
}

// WithPayload adds the payload to the v2 update cluster conflict response
func (o *V2UpdateClusterConflict) WithPayload(payload *models.Error) *V2UpdateClusterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster conflict response
func (o *V2UpdateClusterConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UpdateClusterInternalServerErrorCode is the HTTP code returned for type V2UpdateClusterInternalServerError
const V2UpdateClusterInternalServerErrorCode int = 500

/*V2UpdateClusterInternalServerError Error.

swagger:response v2UpdateClusterInternalServerError
*/
type V2UpdateClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UpdateClusterInternalServerError creates V2UpdateClusterInternalServerError with default headers values
func NewV2UpdateClusterInternalServerError() *V2UpdateClusterInternalServerError {

	return &V2UpdateClusterInternalServerError{}
}

// WithPayload adds the payload to the v2 update cluster internal server error response
func (o *V2UpdateClusterInternalServerError) WithPayload(payload *models.Error) *V2UpdateClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 update cluster internal server error response
func (o *V2UpdateClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UpdateClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
