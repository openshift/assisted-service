// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TransformClusterToDay2HandlerFunc turns a function with the right signature into a transform cluster to day2 handler
type TransformClusterToDay2HandlerFunc func(TransformClusterToDay2Params, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn TransformClusterToDay2HandlerFunc) Handle(params TransformClusterToDay2Params, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// TransformClusterToDay2Handler interface for that can handle valid transform cluster to day2 params
type TransformClusterToDay2Handler interface {
	Handle(TransformClusterToDay2Params, interface{}) middleware.Responder
}

// NewTransformClusterToDay2 creates a new http.Handler for the transform cluster to day2 operation
func NewTransformClusterToDay2(ctx *middleware.Context, handler TransformClusterToDay2Handler) *TransformClusterToDay2 {
	return &TransformClusterToDay2{Context: ctx, Handler: handler}
}

/* TransformClusterToDay2 swagger:route POST /v2/clusters/{cluster_id}/actions/allow-add-workers installer transformClusterToDay2

Deprecated, maintained for legacy purposes. Does the same thing as allow-add-hosts. Use allow-add-hosts instead.

*/
type TransformClusterToDay2 struct {
	Context *middleware.Context
	Handler TransformClusterToDay2Handler
}

func (o *TransformClusterToDay2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTransformClusterToDay2Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
