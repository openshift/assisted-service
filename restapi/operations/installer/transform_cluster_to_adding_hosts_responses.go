// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// TransformClusterToAddingHostsAcceptedCode is the HTTP code returned for type TransformClusterToAddingHostsAccepted
const TransformClusterToAddingHostsAcceptedCode int = 202

/*TransformClusterToAddingHostsAccepted Success.

swagger:response transformClusterToAddingHostsAccepted
*/
type TransformClusterToAddingHostsAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsAccepted creates TransformClusterToAddingHostsAccepted with default headers values
func NewTransformClusterToAddingHostsAccepted() *TransformClusterToAddingHostsAccepted {

	return &TransformClusterToAddingHostsAccepted{}
}

// WithPayload adds the payload to the transform cluster to adding hosts accepted response
func (o *TransformClusterToAddingHostsAccepted) WithPayload(payload *models.Cluster) *TransformClusterToAddingHostsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts accepted response
func (o *TransformClusterToAddingHostsAccepted) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsUnauthorizedCode is the HTTP code returned for type TransformClusterToAddingHostsUnauthorized
const TransformClusterToAddingHostsUnauthorizedCode int = 401

/*TransformClusterToAddingHostsUnauthorized Unauthorized.

swagger:response transformClusterToAddingHostsUnauthorized
*/
type TransformClusterToAddingHostsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsUnauthorized creates TransformClusterToAddingHostsUnauthorized with default headers values
func NewTransformClusterToAddingHostsUnauthorized() *TransformClusterToAddingHostsUnauthorized {

	return &TransformClusterToAddingHostsUnauthorized{}
}

// WithPayload adds the payload to the transform cluster to adding hosts unauthorized response
func (o *TransformClusterToAddingHostsUnauthorized) WithPayload(payload *models.InfraError) *TransformClusterToAddingHostsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts unauthorized response
func (o *TransformClusterToAddingHostsUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsForbiddenCode is the HTTP code returned for type TransformClusterToAddingHostsForbidden
const TransformClusterToAddingHostsForbiddenCode int = 403

/*TransformClusterToAddingHostsForbidden Forbidden.

swagger:response transformClusterToAddingHostsForbidden
*/
type TransformClusterToAddingHostsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsForbidden creates TransformClusterToAddingHostsForbidden with default headers values
func NewTransformClusterToAddingHostsForbidden() *TransformClusterToAddingHostsForbidden {

	return &TransformClusterToAddingHostsForbidden{}
}

// WithPayload adds the payload to the transform cluster to adding hosts forbidden response
func (o *TransformClusterToAddingHostsForbidden) WithPayload(payload *models.InfraError) *TransformClusterToAddingHostsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts forbidden response
func (o *TransformClusterToAddingHostsForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsNotFoundCode is the HTTP code returned for type TransformClusterToAddingHostsNotFound
const TransformClusterToAddingHostsNotFoundCode int = 404

/*TransformClusterToAddingHostsNotFound Error.

swagger:response transformClusterToAddingHostsNotFound
*/
type TransformClusterToAddingHostsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsNotFound creates TransformClusterToAddingHostsNotFound with default headers values
func NewTransformClusterToAddingHostsNotFound() *TransformClusterToAddingHostsNotFound {

	return &TransformClusterToAddingHostsNotFound{}
}

// WithPayload adds the payload to the transform cluster to adding hosts not found response
func (o *TransformClusterToAddingHostsNotFound) WithPayload(payload *models.Error) *TransformClusterToAddingHostsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts not found response
func (o *TransformClusterToAddingHostsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsMethodNotAllowedCode is the HTTP code returned for type TransformClusterToAddingHostsMethodNotAllowed
const TransformClusterToAddingHostsMethodNotAllowedCode int = 405

/*TransformClusterToAddingHostsMethodNotAllowed Method Not Allowed.

swagger:response transformClusterToAddingHostsMethodNotAllowed
*/
type TransformClusterToAddingHostsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsMethodNotAllowed creates TransformClusterToAddingHostsMethodNotAllowed with default headers values
func NewTransformClusterToAddingHostsMethodNotAllowed() *TransformClusterToAddingHostsMethodNotAllowed {

	return &TransformClusterToAddingHostsMethodNotAllowed{}
}

// WithPayload adds the payload to the transform cluster to adding hosts method not allowed response
func (o *TransformClusterToAddingHostsMethodNotAllowed) WithPayload(payload *models.Error) *TransformClusterToAddingHostsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts method not allowed response
func (o *TransformClusterToAddingHostsMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsConflictCode is the HTTP code returned for type TransformClusterToAddingHostsConflict
const TransformClusterToAddingHostsConflictCode int = 409

/*TransformClusterToAddingHostsConflict Error.

swagger:response transformClusterToAddingHostsConflict
*/
type TransformClusterToAddingHostsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsConflict creates TransformClusterToAddingHostsConflict with default headers values
func NewTransformClusterToAddingHostsConflict() *TransformClusterToAddingHostsConflict {

	return &TransformClusterToAddingHostsConflict{}
}

// WithPayload adds the payload to the transform cluster to adding hosts conflict response
func (o *TransformClusterToAddingHostsConflict) WithPayload(payload *models.Error) *TransformClusterToAddingHostsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts conflict response
func (o *TransformClusterToAddingHostsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TransformClusterToAddingHostsInternalServerErrorCode is the HTTP code returned for type TransformClusterToAddingHostsInternalServerError
const TransformClusterToAddingHostsInternalServerErrorCode int = 500

/*TransformClusterToAddingHostsInternalServerError Error.

swagger:response transformClusterToAddingHostsInternalServerError
*/
type TransformClusterToAddingHostsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTransformClusterToAddingHostsInternalServerError creates TransformClusterToAddingHostsInternalServerError with default headers values
func NewTransformClusterToAddingHostsInternalServerError() *TransformClusterToAddingHostsInternalServerError {

	return &TransformClusterToAddingHostsInternalServerError{}
}

// WithPayload adds the payload to the transform cluster to adding hosts internal server error response
func (o *TransformClusterToAddingHostsInternalServerError) WithPayload(payload *models.Error) *TransformClusterToAddingHostsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the transform cluster to adding hosts internal server error response
func (o *TransformClusterToAddingHostsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TransformClusterToAddingHostsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
