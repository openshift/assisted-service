// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewUpdateLogsProgressParams creates a new UpdateLogsProgressParams object
// no default values defined in spec.
func NewUpdateLogsProgressParams() UpdateLogsProgressParams {

	return UpdateLogsProgressParams{}
}

// UpdateLogsProgressParams contains all the bound params for the update logs progress operation
// typically these are obtained from a http.Request
//
// swagger:parameters UpdateLogsProgress
type UpdateLogsProgressParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The cluster whose log progress is being updated.
	  Required: true
	  In: path
	*/
	ClusterID strfmt.UUID
	/*The host whose log progress is being updated.
	  In: query
	*/
	HostID *strfmt.UUID
	/*The state of collecting logs.
	  Required: true
	  In: query
	*/
	LogsState string
	/*The type of log file.
	  Required: true
	  In: query
	*/
	LogsType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateLogsProgressParams() beforehand.
func (o *UpdateLogsProgressParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rClusterID, rhkClusterID, _ := route.Params.GetOK("cluster_id")
	if err := o.bindClusterID(rClusterID, rhkClusterID, route.Formats); err != nil {
		res = append(res, err)
	}

	qHostID, qhkHostID, _ := qs.GetOK("host_id")
	if err := o.bindHostID(qHostID, qhkHostID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLogsState, qhkLogsState, _ := qs.GetOK("logs_state")
	if err := o.bindLogsState(qLogsState, qhkLogsState, route.Formats); err != nil {
		res = append(res, err)
	}

	qLogsType, qhkLogsType, _ := qs.GetOK("logs_type")
	if err := o.bindLogsType(qLogsType, qhkLogsType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterID binds and validates parameter ClusterID from path.
func (o *UpdateLogsProgressParams) bindClusterID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("cluster_id", "path", "strfmt.UUID", raw)
	}
	o.ClusterID = *(value.(*strfmt.UUID))

	if err := o.validateClusterID(formats); err != nil {
		return err
	}

	return nil
}

// validateClusterID carries on validations for parameter ClusterID
func (o *UpdateLogsProgressParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.FormatOf("cluster_id", "path", "uuid", o.ClusterID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindHostID binds and validates parameter HostID from query.
func (o *UpdateLogsProgressParams) bindHostID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("host_id", "query", "strfmt.UUID", raw)
	}
	o.HostID = (value.(*strfmt.UUID))

	if err := o.validateHostID(formats); err != nil {
		return err
	}

	return nil
}

// validateHostID carries on validations for parameter HostID
func (o *UpdateLogsProgressParams) validateHostID(formats strfmt.Registry) error {

	if err := validate.FormatOf("host_id", "query", "uuid", o.HostID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLogsState binds and validates parameter LogsState from query.
func (o *UpdateLogsProgressParams) bindLogsState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("logs_state", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("logs_state", "query", raw); err != nil {
		return err
	}

	o.LogsState = raw

	if err := o.validateLogsState(formats); err != nil {
		return err
	}

	return nil
}

// validateLogsState carries on validations for parameter LogsState
func (o *UpdateLogsProgressParams) validateLogsState(formats strfmt.Registry) error {

	if err := validate.EnumCase("logs_state", "query", o.LogsState, []interface{}{"requested", "collecting", "completed"}, true); err != nil {
		return err
	}

	return nil
}

// bindLogsType binds and validates parameter LogsType from query.
func (o *UpdateLogsProgressParams) bindLogsType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("logs_type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("logs_type", "query", raw); err != nil {
		return err
	}

	o.LogsType = raw

	if err := o.validateLogsType(formats); err != nil {
		return err
	}

	return nil
}

// validateLogsType carries on validations for parameter LogsType
func (o *UpdateLogsProgressParams) validateLogsType(formats strfmt.Registry) error {

	if err := validate.EnumCase("logs_type", "query", o.LogsType, []interface{}{"host", "controller"}, true); err != nil {
		return err
	}

	return nil
}
