// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2UploadClusterIngressCertCreatedCode is the HTTP code returned for type V2UploadClusterIngressCertCreated
const V2UploadClusterIngressCertCreatedCode int = 201

/*V2UploadClusterIngressCertCreated Success.

swagger:response v2UploadClusterIngressCertCreated
*/
type V2UploadClusterIngressCertCreated struct {
}

// NewV2UploadClusterIngressCertCreated creates V2UploadClusterIngressCertCreated with default headers values
func NewV2UploadClusterIngressCertCreated() *V2UploadClusterIngressCertCreated {

	return &V2UploadClusterIngressCertCreated{}
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// V2UploadClusterIngressCertBadRequestCode is the HTTP code returned for type V2UploadClusterIngressCertBadRequest
const V2UploadClusterIngressCertBadRequestCode int = 400

/*V2UploadClusterIngressCertBadRequest Error.

swagger:response v2UploadClusterIngressCertBadRequest
*/
type V2UploadClusterIngressCertBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertBadRequest creates V2UploadClusterIngressCertBadRequest with default headers values
func NewV2UploadClusterIngressCertBadRequest() *V2UploadClusterIngressCertBadRequest {

	return &V2UploadClusterIngressCertBadRequest{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert bad request response
func (o *V2UploadClusterIngressCertBadRequest) WithPayload(payload *models.Error) *V2UploadClusterIngressCertBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert bad request response
func (o *V2UploadClusterIngressCertBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertUnauthorizedCode is the HTTP code returned for type V2UploadClusterIngressCertUnauthorized
const V2UploadClusterIngressCertUnauthorizedCode int = 401

/*V2UploadClusterIngressCertUnauthorized Unauthorized.

swagger:response v2UploadClusterIngressCertUnauthorized
*/
type V2UploadClusterIngressCertUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertUnauthorized creates V2UploadClusterIngressCertUnauthorized with default headers values
func NewV2UploadClusterIngressCertUnauthorized() *V2UploadClusterIngressCertUnauthorized {

	return &V2UploadClusterIngressCertUnauthorized{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert unauthorized response
func (o *V2UploadClusterIngressCertUnauthorized) WithPayload(payload *models.InfraError) *V2UploadClusterIngressCertUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert unauthorized response
func (o *V2UploadClusterIngressCertUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertForbiddenCode is the HTTP code returned for type V2UploadClusterIngressCertForbidden
const V2UploadClusterIngressCertForbiddenCode int = 403

/*V2UploadClusterIngressCertForbidden Forbidden.

swagger:response v2UploadClusterIngressCertForbidden
*/
type V2UploadClusterIngressCertForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertForbidden creates V2UploadClusterIngressCertForbidden with default headers values
func NewV2UploadClusterIngressCertForbidden() *V2UploadClusterIngressCertForbidden {

	return &V2UploadClusterIngressCertForbidden{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert forbidden response
func (o *V2UploadClusterIngressCertForbidden) WithPayload(payload *models.InfraError) *V2UploadClusterIngressCertForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert forbidden response
func (o *V2UploadClusterIngressCertForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertNotFoundCode is the HTTP code returned for type V2UploadClusterIngressCertNotFound
const V2UploadClusterIngressCertNotFoundCode int = 404

/*V2UploadClusterIngressCertNotFound Error.

swagger:response v2UploadClusterIngressCertNotFound
*/
type V2UploadClusterIngressCertNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertNotFound creates V2UploadClusterIngressCertNotFound with default headers values
func NewV2UploadClusterIngressCertNotFound() *V2UploadClusterIngressCertNotFound {

	return &V2UploadClusterIngressCertNotFound{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert not found response
func (o *V2UploadClusterIngressCertNotFound) WithPayload(payload *models.Error) *V2UploadClusterIngressCertNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert not found response
func (o *V2UploadClusterIngressCertNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertMethodNotAllowedCode is the HTTP code returned for type V2UploadClusterIngressCertMethodNotAllowed
const V2UploadClusterIngressCertMethodNotAllowedCode int = 405

/*V2UploadClusterIngressCertMethodNotAllowed Method Not Allowed.

swagger:response v2UploadClusterIngressCertMethodNotAllowed
*/
type V2UploadClusterIngressCertMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertMethodNotAllowed creates V2UploadClusterIngressCertMethodNotAllowed with default headers values
func NewV2UploadClusterIngressCertMethodNotAllowed() *V2UploadClusterIngressCertMethodNotAllowed {

	return &V2UploadClusterIngressCertMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert method not allowed response
func (o *V2UploadClusterIngressCertMethodNotAllowed) WithPayload(payload *models.Error) *V2UploadClusterIngressCertMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert method not allowed response
func (o *V2UploadClusterIngressCertMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertInternalServerErrorCode is the HTTP code returned for type V2UploadClusterIngressCertInternalServerError
const V2UploadClusterIngressCertInternalServerErrorCode int = 500

/*V2UploadClusterIngressCertInternalServerError Error.

swagger:response v2UploadClusterIngressCertInternalServerError
*/
type V2UploadClusterIngressCertInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertInternalServerError creates V2UploadClusterIngressCertInternalServerError with default headers values
func NewV2UploadClusterIngressCertInternalServerError() *V2UploadClusterIngressCertInternalServerError {

	return &V2UploadClusterIngressCertInternalServerError{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert internal server error response
func (o *V2UploadClusterIngressCertInternalServerError) WithPayload(payload *models.Error) *V2UploadClusterIngressCertInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert internal server error response
func (o *V2UploadClusterIngressCertInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2UploadClusterIngressCertServiceUnavailableCode is the HTTP code returned for type V2UploadClusterIngressCertServiceUnavailable
const V2UploadClusterIngressCertServiceUnavailableCode int = 503

/*V2UploadClusterIngressCertServiceUnavailable Unavailable.

swagger:response v2UploadClusterIngressCertServiceUnavailable
*/
type V2UploadClusterIngressCertServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2UploadClusterIngressCertServiceUnavailable creates V2UploadClusterIngressCertServiceUnavailable with default headers values
func NewV2UploadClusterIngressCertServiceUnavailable() *V2UploadClusterIngressCertServiceUnavailable {

	return &V2UploadClusterIngressCertServiceUnavailable{}
}

// WithPayload adds the payload to the v2 upload cluster ingress cert service unavailable response
func (o *V2UploadClusterIngressCertServiceUnavailable) WithPayload(payload *models.Error) *V2UploadClusterIngressCertServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 upload cluster ingress cert service unavailable response
func (o *V2UploadClusterIngressCertServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2UploadClusterIngressCertServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
