// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2GetHostIgnitionOKCode is the HTTP code returned for type V2GetHostIgnitionOK
const V2GetHostIgnitionOKCode int = 200

/*V2GetHostIgnitionOK Success.

swagger:response v2GetHostIgnitionOK
*/
type V2GetHostIgnitionOK struct {

	/*
	  In: Body
	*/
	Payload *models.HostIgnitionParams `json:"body,omitempty"`
}

// NewV2GetHostIgnitionOK creates V2GetHostIgnitionOK with default headers values
func NewV2GetHostIgnitionOK() *V2GetHostIgnitionOK {

	return &V2GetHostIgnitionOK{}
}

// WithPayload adds the payload to the v2 get host ignition o k response
func (o *V2GetHostIgnitionOK) WithPayload(payload *models.HostIgnitionParams) *V2GetHostIgnitionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition o k response
func (o *V2GetHostIgnitionOK) SetPayload(payload *models.HostIgnitionParams) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionUnauthorizedCode is the HTTP code returned for type V2GetHostIgnitionUnauthorized
const V2GetHostIgnitionUnauthorizedCode int = 401

/*V2GetHostIgnitionUnauthorized Unauthorized.

swagger:response v2GetHostIgnitionUnauthorized
*/
type V2GetHostIgnitionUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2GetHostIgnitionUnauthorized creates V2GetHostIgnitionUnauthorized with default headers values
func NewV2GetHostIgnitionUnauthorized() *V2GetHostIgnitionUnauthorized {

	return &V2GetHostIgnitionUnauthorized{}
}

// WithPayload adds the payload to the v2 get host ignition unauthorized response
func (o *V2GetHostIgnitionUnauthorized) WithPayload(payload *models.InfraError) *V2GetHostIgnitionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition unauthorized response
func (o *V2GetHostIgnitionUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionForbiddenCode is the HTTP code returned for type V2GetHostIgnitionForbidden
const V2GetHostIgnitionForbiddenCode int = 403

/*V2GetHostIgnitionForbidden Forbidden.

swagger:response v2GetHostIgnitionForbidden
*/
type V2GetHostIgnitionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2GetHostIgnitionForbidden creates V2GetHostIgnitionForbidden with default headers values
func NewV2GetHostIgnitionForbidden() *V2GetHostIgnitionForbidden {

	return &V2GetHostIgnitionForbidden{}
}

// WithPayload adds the payload to the v2 get host ignition forbidden response
func (o *V2GetHostIgnitionForbidden) WithPayload(payload *models.InfraError) *V2GetHostIgnitionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition forbidden response
func (o *V2GetHostIgnitionForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionNotFoundCode is the HTTP code returned for type V2GetHostIgnitionNotFound
const V2GetHostIgnitionNotFoundCode int = 404

/*V2GetHostIgnitionNotFound Error.

swagger:response v2GetHostIgnitionNotFound
*/
type V2GetHostIgnitionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetHostIgnitionNotFound creates V2GetHostIgnitionNotFound with default headers values
func NewV2GetHostIgnitionNotFound() *V2GetHostIgnitionNotFound {

	return &V2GetHostIgnitionNotFound{}
}

// WithPayload adds the payload to the v2 get host ignition not found response
func (o *V2GetHostIgnitionNotFound) WithPayload(payload *models.Error) *V2GetHostIgnitionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition not found response
func (o *V2GetHostIgnitionNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionMethodNotAllowedCode is the HTTP code returned for type V2GetHostIgnitionMethodNotAllowed
const V2GetHostIgnitionMethodNotAllowedCode int = 405

/*V2GetHostIgnitionMethodNotAllowed Method Not Allowed.

swagger:response v2GetHostIgnitionMethodNotAllowed
*/
type V2GetHostIgnitionMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetHostIgnitionMethodNotAllowed creates V2GetHostIgnitionMethodNotAllowed with default headers values
func NewV2GetHostIgnitionMethodNotAllowed() *V2GetHostIgnitionMethodNotAllowed {

	return &V2GetHostIgnitionMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 get host ignition method not allowed response
func (o *V2GetHostIgnitionMethodNotAllowed) WithPayload(payload *models.Error) *V2GetHostIgnitionMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition method not allowed response
func (o *V2GetHostIgnitionMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionInternalServerErrorCode is the HTTP code returned for type V2GetHostIgnitionInternalServerError
const V2GetHostIgnitionInternalServerErrorCode int = 500

/*V2GetHostIgnitionInternalServerError Error.

swagger:response v2GetHostIgnitionInternalServerError
*/
type V2GetHostIgnitionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetHostIgnitionInternalServerError creates V2GetHostIgnitionInternalServerError with default headers values
func NewV2GetHostIgnitionInternalServerError() *V2GetHostIgnitionInternalServerError {

	return &V2GetHostIgnitionInternalServerError{}
}

// WithPayload adds the payload to the v2 get host ignition internal server error response
func (o *V2GetHostIgnitionInternalServerError) WithPayload(payload *models.Error) *V2GetHostIgnitionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition internal server error response
func (o *V2GetHostIgnitionInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionNotImplementedCode is the HTTP code returned for type V2GetHostIgnitionNotImplemented
const V2GetHostIgnitionNotImplementedCode int = 501

/*V2GetHostIgnitionNotImplemented Not implemented.

swagger:response v2GetHostIgnitionNotImplemented
*/
type V2GetHostIgnitionNotImplemented struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetHostIgnitionNotImplemented creates V2GetHostIgnitionNotImplemented with default headers values
func NewV2GetHostIgnitionNotImplemented() *V2GetHostIgnitionNotImplemented {

	return &V2GetHostIgnitionNotImplemented{}
}

// WithPayload adds the payload to the v2 get host ignition not implemented response
func (o *V2GetHostIgnitionNotImplemented) WithPayload(payload *models.Error) *V2GetHostIgnitionNotImplemented {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition not implemented response
func (o *V2GetHostIgnitionNotImplemented) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionNotImplemented) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(501)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetHostIgnitionServiceUnavailableCode is the HTTP code returned for type V2GetHostIgnitionServiceUnavailable
const V2GetHostIgnitionServiceUnavailableCode int = 503

/*V2GetHostIgnitionServiceUnavailable Unavailable.

swagger:response v2GetHostIgnitionServiceUnavailable
*/
type V2GetHostIgnitionServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewV2GetHostIgnitionServiceUnavailable creates V2GetHostIgnitionServiceUnavailable with default headers values
func NewV2GetHostIgnitionServiceUnavailable() *V2GetHostIgnitionServiceUnavailable {

	return &V2GetHostIgnitionServiceUnavailable{}
}

// WithPayload adds the payload to the v2 get host ignition service unavailable response
func (o *V2GetHostIgnitionServiceUnavailable) WithPayload(payload string) *V2GetHostIgnitionServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get host ignition service unavailable response
func (o *V2GetHostIgnitionServiceUnavailable) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetHostIgnitionServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
