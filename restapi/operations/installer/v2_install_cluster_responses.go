// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2InstallClusterAcceptedCode is the HTTP code returned for type V2InstallClusterAccepted
const V2InstallClusterAcceptedCode int = 202

/*V2InstallClusterAccepted Success.

swagger:response v2InstallClusterAccepted
*/
type V2InstallClusterAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewV2InstallClusterAccepted creates V2InstallClusterAccepted with default headers values
func NewV2InstallClusterAccepted() *V2InstallClusterAccepted {

	return &V2InstallClusterAccepted{}
}

// WithPayload adds the payload to the v2 install cluster accepted response
func (o *V2InstallClusterAccepted) WithPayload(payload *models.Cluster) *V2InstallClusterAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster accepted response
func (o *V2InstallClusterAccepted) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterBadRequestCode is the HTTP code returned for type V2InstallClusterBadRequest
const V2InstallClusterBadRequestCode int = 400

/*V2InstallClusterBadRequest Error.

swagger:response v2InstallClusterBadRequest
*/
type V2InstallClusterBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2InstallClusterBadRequest creates V2InstallClusterBadRequest with default headers values
func NewV2InstallClusterBadRequest() *V2InstallClusterBadRequest {

	return &V2InstallClusterBadRequest{}
}

// WithPayload adds the payload to the v2 install cluster bad request response
func (o *V2InstallClusterBadRequest) WithPayload(payload *models.Error) *V2InstallClusterBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster bad request response
func (o *V2InstallClusterBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterUnauthorizedCode is the HTTP code returned for type V2InstallClusterUnauthorized
const V2InstallClusterUnauthorizedCode int = 401

/*V2InstallClusterUnauthorized Unauthorized.

swagger:response v2InstallClusterUnauthorized
*/
type V2InstallClusterUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2InstallClusterUnauthorized creates V2InstallClusterUnauthorized with default headers values
func NewV2InstallClusterUnauthorized() *V2InstallClusterUnauthorized {

	return &V2InstallClusterUnauthorized{}
}

// WithPayload adds the payload to the v2 install cluster unauthorized response
func (o *V2InstallClusterUnauthorized) WithPayload(payload *models.InfraError) *V2InstallClusterUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster unauthorized response
func (o *V2InstallClusterUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterForbiddenCode is the HTTP code returned for type V2InstallClusterForbidden
const V2InstallClusterForbiddenCode int = 403

/*V2InstallClusterForbidden Forbidden.

swagger:response v2InstallClusterForbidden
*/
type V2InstallClusterForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2InstallClusterForbidden creates V2InstallClusterForbidden with default headers values
func NewV2InstallClusterForbidden() *V2InstallClusterForbidden {

	return &V2InstallClusterForbidden{}
}

// WithPayload adds the payload to the v2 install cluster forbidden response
func (o *V2InstallClusterForbidden) WithPayload(payload *models.InfraError) *V2InstallClusterForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster forbidden response
func (o *V2InstallClusterForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterNotFoundCode is the HTTP code returned for type V2InstallClusterNotFound
const V2InstallClusterNotFoundCode int = 404

/*V2InstallClusterNotFound Error.

swagger:response v2InstallClusterNotFound
*/
type V2InstallClusterNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2InstallClusterNotFound creates V2InstallClusterNotFound with default headers values
func NewV2InstallClusterNotFound() *V2InstallClusterNotFound {

	return &V2InstallClusterNotFound{}
}

// WithPayload adds the payload to the v2 install cluster not found response
func (o *V2InstallClusterNotFound) WithPayload(payload *models.Error) *V2InstallClusterNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster not found response
func (o *V2InstallClusterNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterMethodNotAllowedCode is the HTTP code returned for type V2InstallClusterMethodNotAllowed
const V2InstallClusterMethodNotAllowedCode int = 405

/*V2InstallClusterMethodNotAllowed Method Not Allowed.

swagger:response v2InstallClusterMethodNotAllowed
*/
type V2InstallClusterMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2InstallClusterMethodNotAllowed creates V2InstallClusterMethodNotAllowed with default headers values
func NewV2InstallClusterMethodNotAllowed() *V2InstallClusterMethodNotAllowed {

	return &V2InstallClusterMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 install cluster method not allowed response
func (o *V2InstallClusterMethodNotAllowed) WithPayload(payload *models.Error) *V2InstallClusterMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster method not allowed response
func (o *V2InstallClusterMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterConflictCode is the HTTP code returned for type V2InstallClusterConflict
const V2InstallClusterConflictCode int = 409

/*V2InstallClusterConflict Error.

swagger:response v2InstallClusterConflict
*/
type V2InstallClusterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2InstallClusterConflict creates V2InstallClusterConflict with default headers values
func NewV2InstallClusterConflict() *V2InstallClusterConflict {

	return &V2InstallClusterConflict{}
}

// WithPayload adds the payload to the v2 install cluster conflict response
func (o *V2InstallClusterConflict) WithPayload(payload *models.Error) *V2InstallClusterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster conflict response
func (o *V2InstallClusterConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2InstallClusterInternalServerErrorCode is the HTTP code returned for type V2InstallClusterInternalServerError
const V2InstallClusterInternalServerErrorCode int = 500

/*V2InstallClusterInternalServerError Error.

swagger:response v2InstallClusterInternalServerError
*/
type V2InstallClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2InstallClusterInternalServerError creates V2InstallClusterInternalServerError with default headers values
func NewV2InstallClusterInternalServerError() *V2InstallClusterInternalServerError {

	return &V2InstallClusterInternalServerError{}
}

// WithPayload adds the payload to the v2 install cluster internal server error response
func (o *V2InstallClusterInternalServerError) WithPayload(payload *models.Error) *V2InstallClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 install cluster internal server error response
func (o *V2InstallClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2InstallClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
