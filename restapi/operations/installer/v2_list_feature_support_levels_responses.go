// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2ListFeatureSupportLevelsOKCode is the HTTP code returned for type V2ListFeatureSupportLevelsOK
const V2ListFeatureSupportLevelsOKCode int = 200

/*V2ListFeatureSupportLevelsOK Success.

swagger:response v2ListFeatureSupportLevelsOK
*/
type V2ListFeatureSupportLevelsOK struct {

	/*
	  In: Body
	*/
	Payload models.FeatureSupportLevels `json:"body,omitempty"`
}

// NewV2ListFeatureSupportLevelsOK creates V2ListFeatureSupportLevelsOK with default headers values
func NewV2ListFeatureSupportLevelsOK() *V2ListFeatureSupportLevelsOK {

	return &V2ListFeatureSupportLevelsOK{}
}

// WithPayload adds the payload to the v2 list feature support levels o k response
func (o *V2ListFeatureSupportLevelsOK) WithPayload(payload models.FeatureSupportLevels) *V2ListFeatureSupportLevelsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list feature support levels o k response
func (o *V2ListFeatureSupportLevelsOK) SetPayload(payload models.FeatureSupportLevels) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListFeatureSupportLevelsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.FeatureSupportLevels{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// V2ListFeatureSupportLevelsUnauthorizedCode is the HTTP code returned for type V2ListFeatureSupportLevelsUnauthorized
const V2ListFeatureSupportLevelsUnauthorizedCode int = 401

/*V2ListFeatureSupportLevelsUnauthorized Unauthorized.

swagger:response v2ListFeatureSupportLevelsUnauthorized
*/
type V2ListFeatureSupportLevelsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2ListFeatureSupportLevelsUnauthorized creates V2ListFeatureSupportLevelsUnauthorized with default headers values
func NewV2ListFeatureSupportLevelsUnauthorized() *V2ListFeatureSupportLevelsUnauthorized {

	return &V2ListFeatureSupportLevelsUnauthorized{}
}

// WithPayload adds the payload to the v2 list feature support levels unauthorized response
func (o *V2ListFeatureSupportLevelsUnauthorized) WithPayload(payload *models.InfraError) *V2ListFeatureSupportLevelsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list feature support levels unauthorized response
func (o *V2ListFeatureSupportLevelsUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListFeatureSupportLevelsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListFeatureSupportLevelsForbiddenCode is the HTTP code returned for type V2ListFeatureSupportLevelsForbidden
const V2ListFeatureSupportLevelsForbiddenCode int = 403

/*V2ListFeatureSupportLevelsForbidden Forbidden.

swagger:response v2ListFeatureSupportLevelsForbidden
*/
type V2ListFeatureSupportLevelsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2ListFeatureSupportLevelsForbidden creates V2ListFeatureSupportLevelsForbidden with default headers values
func NewV2ListFeatureSupportLevelsForbidden() *V2ListFeatureSupportLevelsForbidden {

	return &V2ListFeatureSupportLevelsForbidden{}
}

// WithPayload adds the payload to the v2 list feature support levels forbidden response
func (o *V2ListFeatureSupportLevelsForbidden) WithPayload(payload *models.InfraError) *V2ListFeatureSupportLevelsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list feature support levels forbidden response
func (o *V2ListFeatureSupportLevelsForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListFeatureSupportLevelsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2ListFeatureSupportLevelsServiceUnavailableCode is the HTTP code returned for type V2ListFeatureSupportLevelsServiceUnavailable
const V2ListFeatureSupportLevelsServiceUnavailableCode int = 503

/*V2ListFeatureSupportLevelsServiceUnavailable Unavailable.

swagger:response v2ListFeatureSupportLevelsServiceUnavailable
*/
type V2ListFeatureSupportLevelsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2ListFeatureSupportLevelsServiceUnavailable creates V2ListFeatureSupportLevelsServiceUnavailable with default headers values
func NewV2ListFeatureSupportLevelsServiceUnavailable() *V2ListFeatureSupportLevelsServiceUnavailable {

	return &V2ListFeatureSupportLevelsServiceUnavailable{}
}

// WithPayload adds the payload to the v2 list feature support levels service unavailable response
func (o *V2ListFeatureSupportLevelsServiceUnavailable) WithPayload(payload *models.Error) *V2ListFeatureSupportLevelsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 list feature support levels service unavailable response
func (o *V2ListFeatureSupportLevelsServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2ListFeatureSupportLevelsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
