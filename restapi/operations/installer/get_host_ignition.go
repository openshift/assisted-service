// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHostIgnitionHandlerFunc turns a function with the right signature into a get host ignition handler
type GetHostIgnitionHandlerFunc func(GetHostIgnitionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHostIgnitionHandlerFunc) Handle(params GetHostIgnitionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetHostIgnitionHandler interface for that can handle valid get host ignition params
type GetHostIgnitionHandler interface {
	Handle(GetHostIgnitionParams, interface{}) middleware.Responder
}

// NewGetHostIgnition creates a new http.Handler for the get host ignition operation
func NewGetHostIgnition(ctx *middleware.Context, handler GetHostIgnitionHandler) *GetHostIgnition {
	return &GetHostIgnition{Context: ctx, Handler: handler}
}

/* GetHostIgnition swagger:route GET /v1/clusters/{cluster_id}/hosts/{host_id}/ignition installer getHostIgnition

Get the customized ignition file for this host as a string

*/
type GetHostIgnition struct {
	Context *middleware.Context
	Handler GetHostIgnitionHandler
}

func (o *GetHostIgnition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHostIgnitionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
