// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openshift/assisted-service/models"
)

// GetDetailedSupportedFeaturesHandlerFunc turns a function with the right signature into a get detailed supported features handler
type GetDetailedSupportedFeaturesHandlerFunc func(GetDetailedSupportedFeaturesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDetailedSupportedFeaturesHandlerFunc) Handle(params GetDetailedSupportedFeaturesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDetailedSupportedFeaturesHandler interface for that can handle valid get detailed supported features params
type GetDetailedSupportedFeaturesHandler interface {
	Handle(GetDetailedSupportedFeaturesParams, interface{}) middleware.Responder
}

// NewGetDetailedSupportedFeatures creates a new http.Handler for the get detailed supported features operation
func NewGetDetailedSupportedFeatures(ctx *middleware.Context, handler GetDetailedSupportedFeaturesHandler) *GetDetailedSupportedFeatures {
	return &GetDetailedSupportedFeatures{Context: ctx, Handler: handler}
}

/*
	GetDetailedSupportedFeatures swagger:route GET /v2/support-levels/features/detailed installer getDetailedSupportedFeatures

Retrieves detailed features information including support level, incompatibilities, and operator dependencies.
*/
type GetDetailedSupportedFeatures struct {
	Context *middleware.Context
	Handler GetDetailedSupportedFeaturesHandler
}

func (o *GetDetailedSupportedFeatures) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDetailedSupportedFeaturesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetDetailedSupportedFeaturesOKBody get detailed supported features o k body
//
// swagger:model GetDetailedSupportedFeaturesOKBody
type GetDetailedSupportedFeaturesOKBody struct {

	// features
	Features []*models.Feature `json:"features"`

	// operators
	Operators []*models.Operator `json:"operators"`
}

// Validate validates this get detailed supported features o k body
func (o *GetDetailedSupportedFeaturesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDetailedSupportedFeaturesOKBody) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(o.Features) { // not required
		return nil
	}

	for i := 0; i < len(o.Features); i++ {
		if swag.IsZero(o.Features[i]) { // not required
			continue
		}

		if o.Features[i] != nil {
			if err := o.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDetailedSupportedFeaturesOK" + "." + "features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDetailedSupportedFeaturesOK" + "." + "features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDetailedSupportedFeaturesOKBody) validateOperators(formats strfmt.Registry) error {
	if swag.IsZero(o.Operators) { // not required
		return nil
	}

	for i := 0; i < len(o.Operators); i++ {
		if swag.IsZero(o.Operators[i]) { // not required
			continue
		}

		if o.Operators[i] != nil {
			if err := o.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDetailedSupportedFeaturesOK" + "." + "operators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDetailedSupportedFeaturesOK" + "." + "operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get detailed supported features o k body based on the context it is used
func (o *GetDetailedSupportedFeaturesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOperators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDetailedSupportedFeaturesOKBody) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Features); i++ {

		if o.Features[i] != nil {
			if err := o.Features[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDetailedSupportedFeaturesOK" + "." + "features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDetailedSupportedFeaturesOK" + "." + "features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDetailedSupportedFeaturesOKBody) contextValidateOperators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Operators); i++ {

		if o.Operators[i] != nil {
			if err := o.Operators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDetailedSupportedFeaturesOK" + "." + "operators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDetailedSupportedFeaturesOK" + "." + "operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDetailedSupportedFeaturesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDetailedSupportedFeaturesOKBody) UnmarshalBinary(b []byte) error {
	var res GetDetailedSupportedFeaturesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
