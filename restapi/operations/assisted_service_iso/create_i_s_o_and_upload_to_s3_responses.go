// Code generated by go-swagger; DO NOT EDIT.

package assisted_service_iso

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// CreateISOAndUploadToS3CreatedCode is the HTTP code returned for type CreateISOAndUploadToS3Created
const CreateISOAndUploadToS3CreatedCode int = 201

/*CreateISOAndUploadToS3Created Success.

swagger:response createISOAndUploadToS3Created
*/
type CreateISOAndUploadToS3Created struct {
}

// NewCreateISOAndUploadToS3Created creates CreateISOAndUploadToS3Created with default headers values
func NewCreateISOAndUploadToS3Created() *CreateISOAndUploadToS3Created {

	return &CreateISOAndUploadToS3Created{}
}

// WriteResponse to the client
func (o *CreateISOAndUploadToS3Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateISOAndUploadToS3BadRequestCode is the HTTP code returned for type CreateISOAndUploadToS3BadRequest
const CreateISOAndUploadToS3BadRequestCode int = 400

/*CreateISOAndUploadToS3BadRequest Error.

swagger:response createISOAndUploadToS3BadRequest
*/
type CreateISOAndUploadToS3BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateISOAndUploadToS3BadRequest creates CreateISOAndUploadToS3BadRequest with default headers values
func NewCreateISOAndUploadToS3BadRequest() *CreateISOAndUploadToS3BadRequest {

	return &CreateISOAndUploadToS3BadRequest{}
}

// WithPayload adds the payload to the create i s o and upload to s3 bad request response
func (o *CreateISOAndUploadToS3BadRequest) WithPayload(payload *models.Error) *CreateISOAndUploadToS3BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create i s o and upload to s3 bad request response
func (o *CreateISOAndUploadToS3BadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateISOAndUploadToS3BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateISOAndUploadToS3UnauthorizedCode is the HTTP code returned for type CreateISOAndUploadToS3Unauthorized
const CreateISOAndUploadToS3UnauthorizedCode int = 401

/*CreateISOAndUploadToS3Unauthorized Unauthorized.

swagger:response createISOAndUploadToS3Unauthorized
*/
type CreateISOAndUploadToS3Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewCreateISOAndUploadToS3Unauthorized creates CreateISOAndUploadToS3Unauthorized with default headers values
func NewCreateISOAndUploadToS3Unauthorized() *CreateISOAndUploadToS3Unauthorized {

	return &CreateISOAndUploadToS3Unauthorized{}
}

// WithPayload adds the payload to the create i s o and upload to s3 unauthorized response
func (o *CreateISOAndUploadToS3Unauthorized) WithPayload(payload *models.InfraError) *CreateISOAndUploadToS3Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create i s o and upload to s3 unauthorized response
func (o *CreateISOAndUploadToS3Unauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateISOAndUploadToS3Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateISOAndUploadToS3ForbiddenCode is the HTTP code returned for type CreateISOAndUploadToS3Forbidden
const CreateISOAndUploadToS3ForbiddenCode int = 403

/*CreateISOAndUploadToS3Forbidden Forbidden.

swagger:response createISOAndUploadToS3Forbidden
*/
type CreateISOAndUploadToS3Forbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewCreateISOAndUploadToS3Forbidden creates CreateISOAndUploadToS3Forbidden with default headers values
func NewCreateISOAndUploadToS3Forbidden() *CreateISOAndUploadToS3Forbidden {

	return &CreateISOAndUploadToS3Forbidden{}
}

// WithPayload adds the payload to the create i s o and upload to s3 forbidden response
func (o *CreateISOAndUploadToS3Forbidden) WithPayload(payload *models.InfraError) *CreateISOAndUploadToS3Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create i s o and upload to s3 forbidden response
func (o *CreateISOAndUploadToS3Forbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateISOAndUploadToS3Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateISOAndUploadToS3InternalServerErrorCode is the HTTP code returned for type CreateISOAndUploadToS3InternalServerError
const CreateISOAndUploadToS3InternalServerErrorCode int = 500

/*CreateISOAndUploadToS3InternalServerError Error.

swagger:response createISOAndUploadToS3InternalServerError
*/
type CreateISOAndUploadToS3InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateISOAndUploadToS3InternalServerError creates CreateISOAndUploadToS3InternalServerError with default headers values
func NewCreateISOAndUploadToS3InternalServerError() *CreateISOAndUploadToS3InternalServerError {

	return &CreateISOAndUploadToS3InternalServerError{}
}

// WithPayload adds the payload to the create i s o and upload to s3 internal server error response
func (o *CreateISOAndUploadToS3InternalServerError) WithPayload(payload *models.Error) *CreateISOAndUploadToS3InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create i s o and upload to s3 internal server error response
func (o *CreateISOAndUploadToS3InternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateISOAndUploadToS3InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
