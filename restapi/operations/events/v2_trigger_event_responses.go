// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2TriggerEventCreatedCode is the HTTP code returned for type V2TriggerEventCreated
const V2TriggerEventCreatedCode int = 201

/*
V2TriggerEventCreated Success.

swagger:response v2TriggerEventCreated
*/
type V2TriggerEventCreated struct {
}

// NewV2TriggerEventCreated creates V2TriggerEventCreated with default headers values
func NewV2TriggerEventCreated() *V2TriggerEventCreated {

	return &V2TriggerEventCreated{}
}

// WriteResponse to the client
func (o *V2TriggerEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// V2TriggerEventBadRequestCode is the HTTP code returned for type V2TriggerEventBadRequest
const V2TriggerEventBadRequestCode int = 400

/*
V2TriggerEventBadRequest Error.

swagger:response v2TriggerEventBadRequest
*/
type V2TriggerEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventBadRequest creates V2TriggerEventBadRequest with default headers values
func NewV2TriggerEventBadRequest() *V2TriggerEventBadRequest {

	return &V2TriggerEventBadRequest{}
}

// WithPayload adds the payload to the v2 trigger event bad request response
func (o *V2TriggerEventBadRequest) WithPayload(payload *models.Error) *V2TriggerEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event bad request response
func (o *V2TriggerEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventUnauthorizedCode is the HTTP code returned for type V2TriggerEventUnauthorized
const V2TriggerEventUnauthorizedCode int = 401

/*
V2TriggerEventUnauthorized Unauthorized.

swagger:response v2TriggerEventUnauthorized
*/
type V2TriggerEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2TriggerEventUnauthorized creates V2TriggerEventUnauthorized with default headers values
func NewV2TriggerEventUnauthorized() *V2TriggerEventUnauthorized {

	return &V2TriggerEventUnauthorized{}
}

// WithPayload adds the payload to the v2 trigger event unauthorized response
func (o *V2TriggerEventUnauthorized) WithPayload(payload *models.InfraError) *V2TriggerEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event unauthorized response
func (o *V2TriggerEventUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventForbiddenCode is the HTTP code returned for type V2TriggerEventForbidden
const V2TriggerEventForbiddenCode int = 403

/*
V2TriggerEventForbidden Forbidden.

swagger:response v2TriggerEventForbidden
*/
type V2TriggerEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2TriggerEventForbidden creates V2TriggerEventForbidden with default headers values
func NewV2TriggerEventForbidden() *V2TriggerEventForbidden {

	return &V2TriggerEventForbidden{}
}

// WithPayload adds the payload to the v2 trigger event forbidden response
func (o *V2TriggerEventForbidden) WithPayload(payload *models.InfraError) *V2TriggerEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event forbidden response
func (o *V2TriggerEventForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventNotFoundCode is the HTTP code returned for type V2TriggerEventNotFound
const V2TriggerEventNotFoundCode int = 404

/*
V2TriggerEventNotFound Error.

swagger:response v2TriggerEventNotFound
*/
type V2TriggerEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventNotFound creates V2TriggerEventNotFound with default headers values
func NewV2TriggerEventNotFound() *V2TriggerEventNotFound {

	return &V2TriggerEventNotFound{}
}

// WithPayload adds the payload to the v2 trigger event not found response
func (o *V2TriggerEventNotFound) WithPayload(payload *models.Error) *V2TriggerEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event not found response
func (o *V2TriggerEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventMethodNotAllowedCode is the HTTP code returned for type V2TriggerEventMethodNotAllowed
const V2TriggerEventMethodNotAllowedCode int = 405

/*
V2TriggerEventMethodNotAllowed Method Not Allowed.

swagger:response v2TriggerEventMethodNotAllowed
*/
type V2TriggerEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventMethodNotAllowed creates V2TriggerEventMethodNotAllowed with default headers values
func NewV2TriggerEventMethodNotAllowed() *V2TriggerEventMethodNotAllowed {

	return &V2TriggerEventMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 trigger event method not allowed response
func (o *V2TriggerEventMethodNotAllowed) WithPayload(payload *models.Error) *V2TriggerEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event method not allowed response
func (o *V2TriggerEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventConflictCode is the HTTP code returned for type V2TriggerEventConflict
const V2TriggerEventConflictCode int = 409

/*
V2TriggerEventConflict Cluster cannot accept new agents due to its current state.

swagger:response v2TriggerEventConflict
*/
type V2TriggerEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventConflict creates V2TriggerEventConflict with default headers values
func NewV2TriggerEventConflict() *V2TriggerEventConflict {

	return &V2TriggerEventConflict{}
}

// WithPayload adds the payload to the v2 trigger event conflict response
func (o *V2TriggerEventConflict) WithPayload(payload *models.Error) *V2TriggerEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event conflict response
func (o *V2TriggerEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventInternalServerErrorCode is the HTTP code returned for type V2TriggerEventInternalServerError
const V2TriggerEventInternalServerErrorCode int = 500

/*
V2TriggerEventInternalServerError Error.

swagger:response v2TriggerEventInternalServerError
*/
type V2TriggerEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventInternalServerError creates V2TriggerEventInternalServerError with default headers values
func NewV2TriggerEventInternalServerError() *V2TriggerEventInternalServerError {

	return &V2TriggerEventInternalServerError{}
}

// WithPayload adds the payload to the v2 trigger event internal server error response
func (o *V2TriggerEventInternalServerError) WithPayload(payload *models.Error) *V2TriggerEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event internal server error response
func (o *V2TriggerEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventNotImplementedCode is the HTTP code returned for type V2TriggerEventNotImplemented
const V2TriggerEventNotImplementedCode int = 501

/*
V2TriggerEventNotImplemented Not implemented.

swagger:response v2TriggerEventNotImplemented
*/
type V2TriggerEventNotImplemented struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventNotImplemented creates V2TriggerEventNotImplemented with default headers values
func NewV2TriggerEventNotImplemented() *V2TriggerEventNotImplemented {

	return &V2TriggerEventNotImplemented{}
}

// WithPayload adds the payload to the v2 trigger event not implemented response
func (o *V2TriggerEventNotImplemented) WithPayload(payload *models.Error) *V2TriggerEventNotImplemented {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event not implemented response
func (o *V2TriggerEventNotImplemented) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventNotImplemented) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(501)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2TriggerEventServiceUnavailableCode is the HTTP code returned for type V2TriggerEventServiceUnavailable
const V2TriggerEventServiceUnavailableCode int = 503

/*
V2TriggerEventServiceUnavailable Unavailable.

swagger:response v2TriggerEventServiceUnavailable
*/
type V2TriggerEventServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2TriggerEventServiceUnavailable creates V2TriggerEventServiceUnavailable with default headers values
func NewV2TriggerEventServiceUnavailable() *V2TriggerEventServiceUnavailable {

	return &V2TriggerEventServiceUnavailable{}
}

// WithPayload adds the payload to the v2 trigger event service unavailable response
func (o *V2TriggerEventServiceUnavailable) WithPayload(payload *models.Error) *V2TriggerEventServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 trigger event service unavailable response
func (o *V2TriggerEventServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2TriggerEventServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
