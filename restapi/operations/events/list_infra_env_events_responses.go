// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// ListInfraEnvEventsOKCode is the HTTP code returned for type ListInfraEnvEventsOK
const ListInfraEnvEventsOKCode int = 200

/*ListInfraEnvEventsOK Success.

swagger:response listInfraEnvEventsOK
*/
type ListInfraEnvEventsOK struct {

	/*
	  In: Body
	*/
	Payload models.EventList `json:"body,omitempty"`
}

// NewListInfraEnvEventsOK creates ListInfraEnvEventsOK with default headers values
func NewListInfraEnvEventsOK() *ListInfraEnvEventsOK {

	return &ListInfraEnvEventsOK{}
}

// WithPayload adds the payload to the list infra env events o k response
func (o *ListInfraEnvEventsOK) WithPayload(payload models.EventList) *ListInfraEnvEventsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events o k response
func (o *ListInfraEnvEventsOK) SetPayload(payload models.EventList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.EventList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListInfraEnvEventsUnauthorizedCode is the HTTP code returned for type ListInfraEnvEventsUnauthorized
const ListInfraEnvEventsUnauthorizedCode int = 401

/*ListInfraEnvEventsUnauthorized Unauthorized.

swagger:response listInfraEnvEventsUnauthorized
*/
type ListInfraEnvEventsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewListInfraEnvEventsUnauthorized creates ListInfraEnvEventsUnauthorized with default headers values
func NewListInfraEnvEventsUnauthorized() *ListInfraEnvEventsUnauthorized {

	return &ListInfraEnvEventsUnauthorized{}
}

// WithPayload adds the payload to the list infra env events unauthorized response
func (o *ListInfraEnvEventsUnauthorized) WithPayload(payload *models.InfraError) *ListInfraEnvEventsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events unauthorized response
func (o *ListInfraEnvEventsUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInfraEnvEventsForbiddenCode is the HTTP code returned for type ListInfraEnvEventsForbidden
const ListInfraEnvEventsForbiddenCode int = 403

/*ListInfraEnvEventsForbidden Forbidden.

swagger:response listInfraEnvEventsForbidden
*/
type ListInfraEnvEventsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewListInfraEnvEventsForbidden creates ListInfraEnvEventsForbidden with default headers values
func NewListInfraEnvEventsForbidden() *ListInfraEnvEventsForbidden {

	return &ListInfraEnvEventsForbidden{}
}

// WithPayload adds the payload to the list infra env events forbidden response
func (o *ListInfraEnvEventsForbidden) WithPayload(payload *models.InfraError) *ListInfraEnvEventsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events forbidden response
func (o *ListInfraEnvEventsForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInfraEnvEventsNotFoundCode is the HTTP code returned for type ListInfraEnvEventsNotFound
const ListInfraEnvEventsNotFoundCode int = 404

/*ListInfraEnvEventsNotFound Error.

swagger:response listInfraEnvEventsNotFound
*/
type ListInfraEnvEventsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListInfraEnvEventsNotFound creates ListInfraEnvEventsNotFound with default headers values
func NewListInfraEnvEventsNotFound() *ListInfraEnvEventsNotFound {

	return &ListInfraEnvEventsNotFound{}
}

// WithPayload adds the payload to the list infra env events not found response
func (o *ListInfraEnvEventsNotFound) WithPayload(payload *models.Error) *ListInfraEnvEventsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events not found response
func (o *ListInfraEnvEventsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInfraEnvEventsMethodNotAllowedCode is the HTTP code returned for type ListInfraEnvEventsMethodNotAllowed
const ListInfraEnvEventsMethodNotAllowedCode int = 405

/*ListInfraEnvEventsMethodNotAllowed Method Not Allowed.

swagger:response listInfraEnvEventsMethodNotAllowed
*/
type ListInfraEnvEventsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListInfraEnvEventsMethodNotAllowed creates ListInfraEnvEventsMethodNotAllowed with default headers values
func NewListInfraEnvEventsMethodNotAllowed() *ListInfraEnvEventsMethodNotAllowed {

	return &ListInfraEnvEventsMethodNotAllowed{}
}

// WithPayload adds the payload to the list infra env events method not allowed response
func (o *ListInfraEnvEventsMethodNotAllowed) WithPayload(payload *models.Error) *ListInfraEnvEventsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events method not allowed response
func (o *ListInfraEnvEventsMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListInfraEnvEventsInternalServerErrorCode is the HTTP code returned for type ListInfraEnvEventsInternalServerError
const ListInfraEnvEventsInternalServerErrorCode int = 500

/*ListInfraEnvEventsInternalServerError Error.

swagger:response listInfraEnvEventsInternalServerError
*/
type ListInfraEnvEventsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListInfraEnvEventsInternalServerError creates ListInfraEnvEventsInternalServerError with default headers values
func NewListInfraEnvEventsInternalServerError() *ListInfraEnvEventsInternalServerError {

	return &ListInfraEnvEventsInternalServerError{}
}

// WithPayload adds the payload to the list infra env events internal server error response
func (o *ListInfraEnvEventsInternalServerError) WithPayload(payload *models.Error) *ListInfraEnvEventsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list infra env events internal server error response
func (o *ListInfraEnvEventsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListInfraEnvEventsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
