// Code generated by go-swagger; DO NOT EDIT.

package operators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2GetBundleOperatorsOKCode is the HTTP code returned for type V2GetBundleOperatorsOK
const V2GetBundleOperatorsOKCode int = 200

/*
V2GetBundleOperatorsOK Success

swagger:response v2GetBundleOperatorsOK
*/
type V2GetBundleOperatorsOK struct {

	/*
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewV2GetBundleOperatorsOK creates V2GetBundleOperatorsOK with default headers values
func NewV2GetBundleOperatorsOK() *V2GetBundleOperatorsOK {

	return &V2GetBundleOperatorsOK{}
}

// WithPayload adds the payload to the v2 get bundle operators o k response
func (o *V2GetBundleOperatorsOK) WithPayload(payload []string) *V2GetBundleOperatorsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get bundle operators o k response
func (o *V2GetBundleOperatorsOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetBundleOperatorsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// V2GetBundleOperatorsNotFoundCode is the HTTP code returned for type V2GetBundleOperatorsNotFound
const V2GetBundleOperatorsNotFoundCode int = 404

/*
V2GetBundleOperatorsNotFound Bundle not found

swagger:response v2GetBundleOperatorsNotFound
*/
type V2GetBundleOperatorsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetBundleOperatorsNotFound creates V2GetBundleOperatorsNotFound with default headers values
func NewV2GetBundleOperatorsNotFound() *V2GetBundleOperatorsNotFound {

	return &V2GetBundleOperatorsNotFound{}
}

// WithPayload adds the payload to the v2 get bundle operators not found response
func (o *V2GetBundleOperatorsNotFound) WithPayload(payload *models.Error) *V2GetBundleOperatorsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get bundle operators not found response
func (o *V2GetBundleOperatorsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetBundleOperatorsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2GetBundleOperatorsInternalServerErrorCode is the HTTP code returned for type V2GetBundleOperatorsInternalServerError
const V2GetBundleOperatorsInternalServerErrorCode int = 500

/*
V2GetBundleOperatorsInternalServerError Internal server error

swagger:response v2GetBundleOperatorsInternalServerError
*/
type V2GetBundleOperatorsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2GetBundleOperatorsInternalServerError creates V2GetBundleOperatorsInternalServerError with default headers values
func NewV2GetBundleOperatorsInternalServerError() *V2GetBundleOperatorsInternalServerError {

	return &V2GetBundleOperatorsInternalServerError{}
}

// WithPayload adds the payload to the v2 get bundle operators internal server error response
func (o *V2GetBundleOperatorsInternalServerError) WithPayload(payload *models.Error) *V2GetBundleOperatorsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 get bundle operators internal server error response
func (o *V2GetBundleOperatorsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2GetBundleOperatorsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
