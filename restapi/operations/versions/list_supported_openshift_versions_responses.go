// Code generated by go-swagger; DO NOT EDIT.

package versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// ListSupportedOpenshiftVersionsOKCode is the HTTP code returned for type ListSupportedOpenshiftVersionsOK
const ListSupportedOpenshiftVersionsOKCode int = 200

/*ListSupportedOpenshiftVersionsOK Success.

swagger:response listSupportedOpenshiftVersionsOK
*/
type ListSupportedOpenshiftVersionsOK struct {

	/*
	  In: Body
	*/
	Payload models.OpenshiftVersions `json:"body,omitempty"`
}

// NewListSupportedOpenshiftVersionsOK creates ListSupportedOpenshiftVersionsOK with default headers values
func NewListSupportedOpenshiftVersionsOK() *ListSupportedOpenshiftVersionsOK {

	return &ListSupportedOpenshiftVersionsOK{}
}

// WithPayload adds the payload to the list supported openshift versions o k response
func (o *ListSupportedOpenshiftVersionsOK) WithPayload(payload models.OpenshiftVersions) *ListSupportedOpenshiftVersionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list supported openshift versions o k response
func (o *ListSupportedOpenshiftVersionsOK) SetPayload(payload models.OpenshiftVersions) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSupportedOpenshiftVersionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty map
		payload = models.OpenshiftVersions{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListSupportedOpenshiftVersionsInternalServerErrorCode is the HTTP code returned for type ListSupportedOpenshiftVersionsInternalServerError
const ListSupportedOpenshiftVersionsInternalServerErrorCode int = 500

/*ListSupportedOpenshiftVersionsInternalServerError Error.

swagger:response listSupportedOpenshiftVersionsInternalServerError
*/
type ListSupportedOpenshiftVersionsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListSupportedOpenshiftVersionsInternalServerError creates ListSupportedOpenshiftVersionsInternalServerError with default headers values
func NewListSupportedOpenshiftVersionsInternalServerError() *ListSupportedOpenshiftVersionsInternalServerError {

	return &ListSupportedOpenshiftVersionsInternalServerError{}
}

// WithPayload adds the payload to the list supported openshift versions internal server error response
func (o *ListSupportedOpenshiftVersionsInternalServerError) WithPayload(payload *models.Error) *ListSupportedOpenshiftVersionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list supported openshift versions internal server error response
func (o *ListSupportedOpenshiftVersionsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSupportedOpenshiftVersionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListSupportedOpenshiftVersionsServiceUnavailableCode is the HTTP code returned for type ListSupportedOpenshiftVersionsServiceUnavailable
const ListSupportedOpenshiftVersionsServiceUnavailableCode int = 503

/*ListSupportedOpenshiftVersionsServiceUnavailable Unavailable.

swagger:response listSupportedOpenshiftVersionsServiceUnavailable
*/
type ListSupportedOpenshiftVersionsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewListSupportedOpenshiftVersionsServiceUnavailable creates ListSupportedOpenshiftVersionsServiceUnavailable with default headers values
func NewListSupportedOpenshiftVersionsServiceUnavailable() *ListSupportedOpenshiftVersionsServiceUnavailable {

	return &ListSupportedOpenshiftVersionsServiceUnavailable{}
}

// WithPayload adds the payload to the list supported openshift versions service unavailable response
func (o *ListSupportedOpenshiftVersionsServiceUnavailable) WithPayload(payload string) *ListSupportedOpenshiftVersionsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list supported openshift versions service unavailable response
func (o *ListSupportedOpenshiftVersionsServiceUnavailable) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSupportedOpenshiftVersionsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
