// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// V2DownloadClusterManifestOKCode is the HTTP code returned for type V2DownloadClusterManifestOK
const V2DownloadClusterManifestOKCode int = 200

/*V2DownloadClusterManifestOK Success.

swagger:response v2DownloadClusterManifestOK
*/
type V2DownloadClusterManifestOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestOK creates V2DownloadClusterManifestOK with default headers values
func NewV2DownloadClusterManifestOK() *V2DownloadClusterManifestOK {

	return &V2DownloadClusterManifestOK{}
}

// WithPayload adds the payload to the v2 download cluster manifest o k response
func (o *V2DownloadClusterManifestOK) WithPayload(payload io.ReadCloser) *V2DownloadClusterManifestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest o k response
func (o *V2DownloadClusterManifestOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// V2DownloadClusterManifestUnauthorizedCode is the HTTP code returned for type V2DownloadClusterManifestUnauthorized
const V2DownloadClusterManifestUnauthorizedCode int = 401

/*V2DownloadClusterManifestUnauthorized Unauthorized.

swagger:response v2DownloadClusterManifestUnauthorized
*/
type V2DownloadClusterManifestUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestUnauthorized creates V2DownloadClusterManifestUnauthorized with default headers values
func NewV2DownloadClusterManifestUnauthorized() *V2DownloadClusterManifestUnauthorized {

	return &V2DownloadClusterManifestUnauthorized{}
}

// WithPayload adds the payload to the v2 download cluster manifest unauthorized response
func (o *V2DownloadClusterManifestUnauthorized) WithPayload(payload *models.InfraError) *V2DownloadClusterManifestUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest unauthorized response
func (o *V2DownloadClusterManifestUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2DownloadClusterManifestForbiddenCode is the HTTP code returned for type V2DownloadClusterManifestForbidden
const V2DownloadClusterManifestForbiddenCode int = 403

/*V2DownloadClusterManifestForbidden Forbidden.

swagger:response v2DownloadClusterManifestForbidden
*/
type V2DownloadClusterManifestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestForbidden creates V2DownloadClusterManifestForbidden with default headers values
func NewV2DownloadClusterManifestForbidden() *V2DownloadClusterManifestForbidden {

	return &V2DownloadClusterManifestForbidden{}
}

// WithPayload adds the payload to the v2 download cluster manifest forbidden response
func (o *V2DownloadClusterManifestForbidden) WithPayload(payload *models.InfraError) *V2DownloadClusterManifestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest forbidden response
func (o *V2DownloadClusterManifestForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2DownloadClusterManifestNotFoundCode is the HTTP code returned for type V2DownloadClusterManifestNotFound
const V2DownloadClusterManifestNotFoundCode int = 404

/*V2DownloadClusterManifestNotFound Error.

swagger:response v2DownloadClusterManifestNotFound
*/
type V2DownloadClusterManifestNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestNotFound creates V2DownloadClusterManifestNotFound with default headers values
func NewV2DownloadClusterManifestNotFound() *V2DownloadClusterManifestNotFound {

	return &V2DownloadClusterManifestNotFound{}
}

// WithPayload adds the payload to the v2 download cluster manifest not found response
func (o *V2DownloadClusterManifestNotFound) WithPayload(payload *models.Error) *V2DownloadClusterManifestNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest not found response
func (o *V2DownloadClusterManifestNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2DownloadClusterManifestMethodNotAllowedCode is the HTTP code returned for type V2DownloadClusterManifestMethodNotAllowed
const V2DownloadClusterManifestMethodNotAllowedCode int = 405

/*V2DownloadClusterManifestMethodNotAllowed Method Not Allowed.

swagger:response v2DownloadClusterManifestMethodNotAllowed
*/
type V2DownloadClusterManifestMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestMethodNotAllowed creates V2DownloadClusterManifestMethodNotAllowed with default headers values
func NewV2DownloadClusterManifestMethodNotAllowed() *V2DownloadClusterManifestMethodNotAllowed {

	return &V2DownloadClusterManifestMethodNotAllowed{}
}

// WithPayload adds the payload to the v2 download cluster manifest method not allowed response
func (o *V2DownloadClusterManifestMethodNotAllowed) WithPayload(payload *models.Error) *V2DownloadClusterManifestMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest method not allowed response
func (o *V2DownloadClusterManifestMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2DownloadClusterManifestConflictCode is the HTTP code returned for type V2DownloadClusterManifestConflict
const V2DownloadClusterManifestConflictCode int = 409

/*V2DownloadClusterManifestConflict Error.

swagger:response v2DownloadClusterManifestConflict
*/
type V2DownloadClusterManifestConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestConflict creates V2DownloadClusterManifestConflict with default headers values
func NewV2DownloadClusterManifestConflict() *V2DownloadClusterManifestConflict {

	return &V2DownloadClusterManifestConflict{}
}

// WithPayload adds the payload to the v2 download cluster manifest conflict response
func (o *V2DownloadClusterManifestConflict) WithPayload(payload *models.Error) *V2DownloadClusterManifestConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest conflict response
func (o *V2DownloadClusterManifestConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// V2DownloadClusterManifestInternalServerErrorCode is the HTTP code returned for type V2DownloadClusterManifestInternalServerError
const V2DownloadClusterManifestInternalServerErrorCode int = 500

/*V2DownloadClusterManifestInternalServerError Error.

swagger:response v2DownloadClusterManifestInternalServerError
*/
type V2DownloadClusterManifestInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewV2DownloadClusterManifestInternalServerError creates V2DownloadClusterManifestInternalServerError with default headers values
func NewV2DownloadClusterManifestInternalServerError() *V2DownloadClusterManifestInternalServerError {

	return &V2DownloadClusterManifestInternalServerError{}
}

// WithPayload adds the payload to the v2 download cluster manifest internal server error response
func (o *V2DownloadClusterManifestInternalServerError) WithPayload(payload *models.Error) *V2DownloadClusterManifestInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the v2 download cluster manifest internal server error response
func (o *V2DownloadClusterManifestInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *V2DownloadClusterManifestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
