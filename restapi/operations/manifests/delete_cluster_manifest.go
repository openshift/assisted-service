// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteClusterManifestHandlerFunc turns a function with the right signature into a delete cluster manifest handler
type DeleteClusterManifestHandlerFunc func(DeleteClusterManifestParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteClusterManifestHandlerFunc) Handle(params DeleteClusterManifestParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteClusterManifestHandler interface for that can handle valid delete cluster manifest params
type DeleteClusterManifestHandler interface {
	Handle(DeleteClusterManifestParams, interface{}) middleware.Responder
}

// NewDeleteClusterManifest creates a new http.Handler for the delete cluster manifest operation
func NewDeleteClusterManifest(ctx *middleware.Context, handler DeleteClusterManifestHandler) *DeleteClusterManifest {
	return &DeleteClusterManifest{Context: ctx, Handler: handler}
}

/* DeleteClusterManifest swagger:route DELETE /v1/clusters/{cluster_id}/manifests manifests deleteClusterManifest

Deletes a manifest from the cluster.

*/
type DeleteClusterManifest struct {
	Context *middleware.Context
	Handler DeleteClusterManifestHandler
}

func (o *DeleteClusterManifest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteClusterManifestParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
