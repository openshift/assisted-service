// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// RegisterDay2ClusterReader is a Reader for the RegisterDay2Cluster structure.
type RegisterDay2ClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterDay2ClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRegisterDay2ClusterCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterDay2ClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterDay2ClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRegisterDay2ClusterCreated creates a RegisterDay2ClusterCreated with default headers values
func NewRegisterDay2ClusterCreated() *RegisterDay2ClusterCreated {
	return &RegisterDay2ClusterCreated{}
}

/*RegisterDay2ClusterCreated handles this case with default header values.

Success.
*/
type RegisterDay2ClusterCreated struct {
	Payload *models.Cluster
}

func (o *RegisterDay2ClusterCreated) Error() string {
	return fmt.Sprintf("[POST /day2_clusters][%d] registerDay2ClusterCreated  %+v", 201, o.Payload)
}

func (o *RegisterDay2ClusterCreated) GetPayload() *models.Cluster {
	return o.Payload
}

func (o *RegisterDay2ClusterCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterDay2ClusterBadRequest creates a RegisterDay2ClusterBadRequest with default headers values
func NewRegisterDay2ClusterBadRequest() *RegisterDay2ClusterBadRequest {
	return &RegisterDay2ClusterBadRequest{}
}

/*RegisterDay2ClusterBadRequest handles this case with default header values.

Error.
*/
type RegisterDay2ClusterBadRequest struct {
	Payload *models.Error
}

func (o *RegisterDay2ClusterBadRequest) Error() string {
	return fmt.Sprintf("[POST /day2_clusters][%d] registerDay2ClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterDay2ClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterDay2ClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterDay2ClusterInternalServerError creates a RegisterDay2ClusterInternalServerError with default headers values
func NewRegisterDay2ClusterInternalServerError() *RegisterDay2ClusterInternalServerError {
	return &RegisterDay2ClusterInternalServerError{}
}

/*RegisterDay2ClusterInternalServerError handles this case with default header values.

Error.
*/
type RegisterDay2ClusterInternalServerError struct {
	Payload *models.Error
}

func (o *RegisterDay2ClusterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /day2_clusters][%d] registerDay2ClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterDay2ClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterDay2ClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
