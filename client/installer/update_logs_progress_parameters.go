// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateLogsProgressParams creates a new UpdateLogsProgressParams object
// with the default values initialized.
func NewUpdateLogsProgressParams() *UpdateLogsProgressParams {
	var ()
	return &UpdateLogsProgressParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateLogsProgressParamsWithTimeout creates a new UpdateLogsProgressParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateLogsProgressParamsWithTimeout(timeout time.Duration) *UpdateLogsProgressParams {
	var ()
	return &UpdateLogsProgressParams{

		timeout: timeout,
	}
}

// NewUpdateLogsProgressParamsWithContext creates a new UpdateLogsProgressParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateLogsProgressParamsWithContext(ctx context.Context) *UpdateLogsProgressParams {
	var ()
	return &UpdateLogsProgressParams{

		Context: ctx,
	}
}

// NewUpdateLogsProgressParamsWithHTTPClient creates a new UpdateLogsProgressParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateLogsProgressParamsWithHTTPClient(client *http.Client) *UpdateLogsProgressParams {
	var ()
	return &UpdateLogsProgressParams{
		HTTPClient: client,
	}
}

/*UpdateLogsProgressParams contains all the parameters to send to the API endpoint
for the update logs progress operation typically these are written to a http.Request
*/
type UpdateLogsProgressParams struct {

	/*ClusterID
	  The cluster whose log progress is being updated.

	*/
	ClusterID strfmt.UUID
	/*HostID
	  The host whose log progress is being updated.

	*/
	HostID *strfmt.UUID
	/*LogsState
	  The state of collecting logs.

	*/
	LogsState string
	/*LogsType
	  The type of log file.

	*/
	LogsType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update logs progress params
func (o *UpdateLogsProgressParams) WithTimeout(timeout time.Duration) *UpdateLogsProgressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update logs progress params
func (o *UpdateLogsProgressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update logs progress params
func (o *UpdateLogsProgressParams) WithContext(ctx context.Context) *UpdateLogsProgressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update logs progress params
func (o *UpdateLogsProgressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update logs progress params
func (o *UpdateLogsProgressParams) WithHTTPClient(client *http.Client) *UpdateLogsProgressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update logs progress params
func (o *UpdateLogsProgressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the update logs progress params
func (o *UpdateLogsProgressParams) WithClusterID(clusterID strfmt.UUID) *UpdateLogsProgressParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the update logs progress params
func (o *UpdateLogsProgressParams) SetClusterID(clusterID strfmt.UUID) {
	o.ClusterID = clusterID
}

// WithHostID adds the hostID to the update logs progress params
func (o *UpdateLogsProgressParams) WithHostID(hostID *strfmt.UUID) *UpdateLogsProgressParams {
	o.SetHostID(hostID)
	return o
}

// SetHostID adds the hostId to the update logs progress params
func (o *UpdateLogsProgressParams) SetHostID(hostID *strfmt.UUID) {
	o.HostID = hostID
}

// WithLogsState adds the logsState to the update logs progress params
func (o *UpdateLogsProgressParams) WithLogsState(logsState string) *UpdateLogsProgressParams {
	o.SetLogsState(logsState)
	return o
}

// SetLogsState adds the logsState to the update logs progress params
func (o *UpdateLogsProgressParams) SetLogsState(logsState string) {
	o.LogsState = logsState
}

// WithLogsType adds the logsType to the update logs progress params
func (o *UpdateLogsProgressParams) WithLogsType(logsType string) *UpdateLogsProgressParams {
	o.SetLogsType(logsType)
	return o
}

// SetLogsType adds the logsType to the update logs progress params
func (o *UpdateLogsProgressParams) SetLogsType(logsType string) {
	o.LogsType = logsType
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateLogsProgressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID.String()); err != nil {
		return err
	}

	if o.HostID != nil {

		// query param host_id
		var qrHostID strfmt.UUID
		if o.HostID != nil {
			qrHostID = *o.HostID
		}
		qHostID := qrHostID.String()
		if qHostID != "" {
			if err := r.SetQueryParam("host_id", qHostID); err != nil {
				return err
			}
		}

	}

	// query param logs_state
	qrLogsState := o.LogsState
	qLogsState := qrLogsState
	if qLogsState != "" {
		if err := r.SetQueryParam("logs_state", qLogsState); err != nil {
			return err
		}
	}

	// query param logs_type
	qrLogsType := o.LogsType
	qLogsType := qrLogsType
	if qLogsType != "" {
		if err := r.SetQueryParam("logs_type", qLogsType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
