// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// NewRegisterDay2ClusterParams creates a new RegisterDay2ClusterParams object
// with the default values initialized.
func NewRegisterDay2ClusterParams() *RegisterDay2ClusterParams {
	var ()
	return &RegisterDay2ClusterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterDay2ClusterParamsWithTimeout creates a new RegisterDay2ClusterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterDay2ClusterParamsWithTimeout(timeout time.Duration) *RegisterDay2ClusterParams {
	var ()
	return &RegisterDay2ClusterParams{

		timeout: timeout,
	}
}

// NewRegisterDay2ClusterParamsWithContext creates a new RegisterDay2ClusterParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterDay2ClusterParamsWithContext(ctx context.Context) *RegisterDay2ClusterParams {
	var ()
	return &RegisterDay2ClusterParams{

		Context: ctx,
	}
}

// NewRegisterDay2ClusterParamsWithHTTPClient creates a new RegisterDay2ClusterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterDay2ClusterParamsWithHTTPClient(client *http.Client) *RegisterDay2ClusterParams {
	var ()
	return &RegisterDay2ClusterParams{
		HTTPClient: client,
	}
}

/*RegisterDay2ClusterParams contains all the parameters to send to the API endpoint
for the register day2 cluster operation typically these are written to a http.Request
*/
type RegisterDay2ClusterParams struct {

	/*NewDay2ClusterParams*/
	NewDay2ClusterParams *models.Day2ClusterCreateParams

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register day2 cluster params
func (o *RegisterDay2ClusterParams) WithTimeout(timeout time.Duration) *RegisterDay2ClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register day2 cluster params
func (o *RegisterDay2ClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register day2 cluster params
func (o *RegisterDay2ClusterParams) WithContext(ctx context.Context) *RegisterDay2ClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register day2 cluster params
func (o *RegisterDay2ClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register day2 cluster params
func (o *RegisterDay2ClusterParams) WithHTTPClient(client *http.Client) *RegisterDay2ClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register day2 cluster params
func (o *RegisterDay2ClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewDay2ClusterParams adds the newDay2ClusterParams to the register day2 cluster params
func (o *RegisterDay2ClusterParams) WithNewDay2ClusterParams(newDay2ClusterParams *models.Day2ClusterCreateParams) *RegisterDay2ClusterParams {
	o.SetNewDay2ClusterParams(newDay2ClusterParams)
	return o
}

// SetNewDay2ClusterParams adds the newDay2ClusterParams to the register day2 cluster params
func (o *RegisterDay2ClusterParams) SetNewDay2ClusterParams(newDay2ClusterParams *models.Day2ClusterCreateParams) {
	o.NewDay2ClusterParams = newDay2ClusterParams
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterDay2ClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NewDay2ClusterParams != nil {
		if err := r.SetBodyParam(o.NewDay2ClusterParams); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
