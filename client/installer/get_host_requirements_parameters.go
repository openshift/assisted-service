// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetHostRequirementsParams creates a new GetHostRequirementsParams object
// with the default values initialized.
func NewGetHostRequirementsParams() *GetHostRequirementsParams {
	var (
		singleNodeDefault = bool(false)
	)
	return &GetHostRequirementsParams{
		SingleNode: &singleNodeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHostRequirementsParamsWithTimeout creates a new GetHostRequirementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHostRequirementsParamsWithTimeout(timeout time.Duration) *GetHostRequirementsParams {
	var (
		singleNodeDefault = bool(false)
	)
	return &GetHostRequirementsParams{
		SingleNode: &singleNodeDefault,

		timeout: timeout,
	}
}

// NewGetHostRequirementsParamsWithContext creates a new GetHostRequirementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHostRequirementsParamsWithContext(ctx context.Context) *GetHostRequirementsParams {
	var (
		singleNodeDefault = bool(false)
	)
	return &GetHostRequirementsParams{
		SingleNode: &singleNodeDefault,

		Context: ctx,
	}
}

// NewGetHostRequirementsParamsWithHTTPClient creates a new GetHostRequirementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHostRequirementsParamsWithHTTPClient(client *http.Client) *GetHostRequirementsParams {
	var (
		singleNodeDefault = bool(false)
	)
	return &GetHostRequirementsParams{
		SingleNode: &singleNodeDefault,
		HTTPClient: client,
	}
}

/*GetHostRequirementsParams contains all the parameters to send to the API endpoint
for the get host requirements operation typically these are written to a http.Request
*/
type GetHostRequirementsParams struct {

	/*SingleNode
	  Get hw requirements for single node.

	*/
	SingleNode *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get host requirements params
func (o *GetHostRequirementsParams) WithTimeout(timeout time.Duration) *GetHostRequirementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get host requirements params
func (o *GetHostRequirementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get host requirements params
func (o *GetHostRequirementsParams) WithContext(ctx context.Context) *GetHostRequirementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get host requirements params
func (o *GetHostRequirementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get host requirements params
func (o *GetHostRequirementsParams) WithHTTPClient(client *http.Client) *GetHostRequirementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get host requirements params
func (o *GetHostRequirementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSingleNode adds the singleNode to the get host requirements params
func (o *GetHostRequirementsParams) WithSingleNode(singleNode *bool) *GetHostRequirementsParams {
	o.SetSingleNode(singleNode)
	return o
}

// SetSingleNode adds the singleNode to the get host requirements params
func (o *GetHostRequirementsParams) SetSingleNode(singleNode *bool) {
	o.SingleNode = singleNode
}

// WriteToRequest writes these params to a swagger request
func (o *GetHostRequirementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SingleNode != nil {

		// header param single_node
		if err := r.SetHeaderParam("single_node", swag.FormatBool(*o.SingleNode)); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
