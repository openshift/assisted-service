# Generate python client
FROM quay.io/edge-infrastructure/swagger-codegen-cli:2.4.18 as swagger_py
COPY swagger.yaml .
COPY tools/generate_python_client.sh .
RUN chmod +x ./generate_python_client.sh && SWAGGER_FILE=swagger.yaml OUTPUT=/build ./generate_python_client.sh

FROM registry.access.redhat.com/ubi9/python-311:latest as pybuilder
COPY --chown=1001:0 . /assisted-service
COPY --from=swagger_py --chown=1001:0 /build /assisted-service/build
RUN python3 -m pip install -I pip && pip3 install -I -r /assisted-service/dev-requirements.txt
RUN cd /assisted-service/build && python3 ../tools/client_package_initializer.py ./ https://github.com/openshift/assisted-service

# TODO: Currently, the Python package is included in the service image for testing purposes. It conveniently allows matching a service version to a specific Python client version. In the future, once the Python package is published on pip, it should (probably) be removed from the Assisted Service image (this dockerfile).

# Build binaries
FROM quay.io/centos/centos:stream9 as builder

RUN dnf install --enablerepo=crb -y gcc git nmstate-devel && dnf clean all
COPY --from=registry.ci.openshift.org/openshift/release:golang-1.20 /usr/local/go /usr/local/go

ENV GOROOT=/usr/local/go
ENV PATH=$PATH:$GOROOT/bin

WORKDIR /assisted-service/

# Bring in the go dependencies before anything else so we can take
# advantage of caching these layers in future builds.
COPY api/go.mod api/go.sum /assisted-service/api/
COPY client/go.mod client/go.sum /assisted-service/client/
COPY models/go.mod models/go.sum /assisted-service/models/
COPY go.mod go.sum /assisted-service/
RUN go mod download

COPY . /assisted-service/

RUN cd cmd && CGO_ENABLED=1 GOFLAGS="" GO111MODULE=on go build -o /build/assisted-service
RUN cd ./cmd/operator && CGO_ENABLED=1 GOFLAGS="" GO111MODULE=on go build -o /build/assisted-service-operator
RUN cd ./cmd/webadmission && CGO_ENABLED=1 GOFLAGS="" GO111MODULE=on go build -o /build/assisted-service-admission
RUN cd ./cmd/agentbasedinstaller/client && CGO_ENABLED=1 GOFLAGS="" GO111MODULE=on go build -o /build/agent-installer-client

# Build a specific version of libxml2 to mitigate CVE-2024-25062
# Nothing is yet available in Stream9 and looks unlikely to be mitigated soon.
FROM quay.io/centos/centos@sha256:2fa98912f5964b54df6d3cec50874bf56abc98f13077f710b8ea9dc1b41bfeb5 as librarybuilder
RUN dnf groupinstall -y 'Development Tools'
RUN curl -X GET https://ftp.gnu.org/gnu/automake/automake-1.16.3.tar.gz --output ./automake-1.12.5.tar.gz && tar xf automake-1.12.5.tar.gz
RUN cd automake-1.16.3 && ./configure --prefix=/usr/local && make && make install
RUN dnf install -y libtool python3-devel pkg-config -y
RUN curl -X GET https://gitlab.gnome.org/GNOME/libxml2/-/archive/v2.12.6/libxml2-v2.12.6.tar.gz --output ./libxml2-v2.12.6.tar.gz && tar -xvf libxml2-v2.12.6.tar.gz 
RUN export ACLOCAL_PATH=/usr/share/aclocal && cd libxml2-v2.12.6 && ./autogen.sh --prefix=/usr --libdir=/usr/lib64 && make && make install

# Create final image
FROM quay.io/centos/centos:stream9

# Update libxml to compiled version
RUN rm /usr/lib64/libxml2* -rf
COPY --from=librarybuilder /usr/lib64/libxml2.la /usr/lib64/libxml2.la
COPY --from=librarybuilder /usr/lib64/libxml2.so.2.12.6 /usr/lib64/libxml2.so.2.12.6
RUN ln -s /usr/lib64/libxml2.so.2.12.6 /usr/lib64/libxml2.so
RUN ln -s /usr/lib64/libxml2.so.2.12.6 /usr/lib64/libxml2.so.2

# multiarch images need it till WRKLDS-222 and https://bugzilla.redhat.com/show_bug.cgi?id=2111537 are fixed
RUN dnf install -y --setopt=install_weak_deps=False skopeo
# openshift-install requires this
RUN dnf install -y libvirt-libs nmstate nmstate-libs &&\
    dnf clean all

RUN dnf update libksba -y && dnf clean all

ARG WORK_DIR=/data

RUN mkdir $WORK_DIR && chmod 775 $WORK_DIR

# downstream this can be installed as an RPM
COPY --from=quay.io/openshift/origin-cli:4.12 /usr/bin/oc /usr/local/bin/

COPY --from=builder /build/assisted-service /assisted-service
COPY --from=builder /build/assisted-service-operator /assisted-service-operator
COPY --from=builder /build/assisted-service-admission /assisted-service-admission
COPY --from=builder /build/agent-installer-client /usr/local/bin/agent-installer-client

RUN ln -s /usr/local/bin/agent-installer-client /agent-based-installer-register-cluster-and-infraenv
COPY --from=pybuilder /assisted-service/build/dist/* /clients/
ENV GODEBUG=madvdontneed=1
ENV GOGC=50
CMD ["/assisted-service"]
